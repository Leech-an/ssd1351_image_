
ssd1351_image_.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000410c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009528  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d7c4  0800d7c4  0000f064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d7c4  0800d7c4  0000e7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d7cc  0800d7cc  0000f064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d7cc  0800d7cc  0000e7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d7d0  0800d7d0  0000e7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800d7d4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f064  2**0
                  CONTENTS
 10 .bss          000001e4  20000064  20000064  0000f064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000248  20000248  0000f064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009b40  00000000  00000000  0000f094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002165  00000000  00000000  00018bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0001ad40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021a9b  00000000  00000000  0001b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6f9  00000000  00000000  0003d213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8dcb  00000000  00000000  0004a90c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001136d7  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000771  00000000  00000000  0011371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f78  00000000  00000000  00113e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00116e04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004284 	.word	0x08004284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08004284 	.word	0x08004284

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SSD1351_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ssd1351.h"

static void SSD1351_Select() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <SSD1351_Select+0x14>)
 80005b6:	f001 f9d5 	bl	8001964 <HAL_GPIO_WritePin>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000

080005c4 <SSD1351_Unselect>:

void SSD1351_Unselect() {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_CS_GPIO_Port, SSD1351_CS_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <SSD1351_Unselect+0x14>)
 80005ce:	f001 f9c9 	bl	8001964 <HAL_GPIO_WritePin>
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020000 	.word	0x40020000

080005dc <SSD1351_Reset>:

static void SSD1351_Reset() {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005e6:	480e      	ldr	r0, [pc, #56]	@ (8000620 <SSD1351_Reset+0x44>)
 80005e8:	f001 f9bc 	bl	8001964 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80005ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005f0:	f000 ff12 	bl	8001418 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fa:	4809      	ldr	r0, [pc, #36]	@ (8000620 <SSD1351_Reset+0x44>)
 80005fc:	f001 f9b2 	bl	8001964 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000600:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000604:	f000 ff08 	bl	8001418 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1351_RES_GPIO_Port, SSD1351_RES_Pin, GPIO_PIN_SET);
 8000608:	2201      	movs	r2, #1
 800060a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060e:	4804      	ldr	r0, [pc, #16]	@ (8000620 <SSD1351_Reset+0x44>)
 8000610:	f001 f9a8 	bl	8001964 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8000614:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000618:	f000 fefe 	bl	8001418 <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SSD1351_WriteCommand>:

static void SSD1351_WriteCommand(uint8_t cmd) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000634:	4806      	ldr	r0, [pc, #24]	@ (8000650 <SSD1351_WriteCommand+0x2c>)
 8000636:	f001 f995 	bl	8001964 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1351_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800063a:	1df9      	adds	r1, r7, #7
 800063c:	f04f 33ff 	mov.w	r3, #4294967295
 8000640:	2201      	movs	r2, #1
 8000642:	4804      	ldr	r0, [pc, #16]	@ (8000654 <SSD1351_WriteCommand+0x30>)
 8000644:	f002 fa87 	bl	8002b56 <HAL_SPI_Transmit>
}
 8000648:	bf00      	nop
 800064a:	3708      	adds	r7, #8
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40020400 	.word	0x40020400
 8000654:	200000a0 	.word	0x200000a0

08000658 <SSD1351_WriteData>:

static void SSD1351_WriteData(uint8_t* buff, size_t buff_size) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000668:	4810      	ldr	r0, [pc, #64]	@ (80006ac <SSD1351_WriteData+0x54>)
 800066a:	f001 f97b 	bl	8001964 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800066e:	e015      	b.n	800069c <SSD1351_WriteData+0x44>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000676:	bf28      	it	cs
 8000678:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 800067c:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&SSD1351_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 800067e:	89fa      	ldrh	r2, [r7, #14]
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	480a      	ldr	r0, [pc, #40]	@ (80006b0 <SSD1351_WriteData+0x58>)
 8000688:	f002 fa65 	bl	8002b56 <HAL_SPI_Transmit>
        buff += chunk_size;
 800068c:	89fb      	ldrh	r3, [r7, #14]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1e6      	bne.n	8000670 <SSD1351_WriteData+0x18>
    }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40020400 	.word	0x40020400
 80006b0:	200000a0 	.word	0x200000a0

080006b4 <SSD1351_SetAddressWindow>:

static void SSD1351_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4604      	mov	r4, r0
 80006bc:	4608      	mov	r0, r1
 80006be:	4611      	mov	r1, r2
 80006c0:	461a      	mov	r2, r3
 80006c2:	4623      	mov	r3, r4
 80006c4:	80fb      	strh	r3, [r7, #6]
 80006c6:	4603      	mov	r3, r0
 80006c8:	80bb      	strh	r3, [r7, #4]
 80006ca:	460b      	mov	r3, r1
 80006cc:	807b      	strh	r3, [r7, #2]
 80006ce:	4613      	mov	r3, r2
 80006d0:	803b      	strh	r3, [r7, #0]
    // column address set
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 80006d2:	2015      	movs	r0, #21
 80006d4:	f7ff ffa6 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { x0 & 0xFF, x1 & 0xFF };
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	733b      	strb	r3, [r7, #12]
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	737b      	strb	r3, [r7, #13]
        SSD1351_WriteData(data, sizeof(data));
 80006e4:	f107 030c 	add.w	r3, r7, #12
 80006e8:	2102      	movs	r1, #2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ffb4 	bl	8000658 <SSD1351_WriteData>
    }

    // row address set
    SSD1351_WriteCommand(0x75); // SETROW
 80006f0:	2075      	movs	r0, #117	@ 0x75
 80006f2:	f7ff ff97 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { y0 & 0xFF, y1 & 0xFF };
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	723b      	strb	r3, [r7, #8]
 80006fc:	883b      	ldrh	r3, [r7, #0]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	727b      	strb	r3, [r7, #9]
        SSD1351_WriteData(data, sizeof(data));
 8000702:	f107 0308 	add.w	r3, r7, #8
 8000706:	2102      	movs	r1, #2
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffa5 	bl	8000658 <SSD1351_WriteData>
    }

    // write to RAM
    SSD1351_WriteCommand(0x5C); // WRITERAM
 800070e:	205c      	movs	r0, #92	@ 0x5c
 8000710:	f7ff ff88 	bl	8000624 <SSD1351_WriteCommand>
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <SSD1351_Init>:

void SSD1351_Init() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b090      	sub	sp, #64	@ 0x40
 8000720:	af00      	add	r7, sp, #0
    SSD1351_Select();
 8000722:	f7ff ff43 	bl	80005ac <SSD1351_Select>
    SSD1351_Reset();
 8000726:	f7ff ff59 	bl	80005dc <SSD1351_Reset>

    // command list is based on https://github.com/adafruit/Adafruit-SSD1351-library

    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 800072a:	20fd      	movs	r0, #253	@ 0xfd
 800072c:	f7ff ff7a 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x12 };
 8000730:	2312      	movs	r3, #18
 8000732:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        SSD1351_WriteData(data, sizeof(data));
 8000736:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800073a:	2101      	movs	r1, #1
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff8b 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xFD); // COMMANDLOCK
 8000742:	20fd      	movs	r0, #253	@ 0xfd
 8000744:	f7ff ff6e 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xB1 };
 8000748:	23b1      	movs	r3, #177	@ 0xb1
 800074a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        SSD1351_WriteData(data, sizeof(data));
 800074e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000752:	2101      	movs	r1, #1
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff7f 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAE); // DISPLAYOFF
 800075a:	20ae      	movs	r0, #174	@ 0xae
 800075c:	f7ff ff62 	bl	8000624 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xB3); // CLOCKDIV
 8000760:	20b3      	movs	r0, #179	@ 0xb3
 8000762:	f7ff ff5f 	bl	8000624 <SSD1351_WriteCommand>
 SSD1351_WriteCommand(0xF1); // 7:4 = Oscillator Frequency, 3:0 = CLK Div Ratio (A[3:0]+1 = 1..16)
 8000766:	20f1      	movs	r0, #241	@ 0xf1
 8000768:	f7ff ff5c 	bl	8000624 <SSD1351_WriteCommand>
    //uint8_t data[] = { 0xF1 }; SSD1351_WriteData(data, 1);
    SSD1351_WriteCommand(0xCA); // MUXRATIO
 800076c:	20ca      	movs	r0, #202	@ 0xca
 800076e:	f7ff ff59 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x7F }; // 127
 8000772:	237f      	movs	r3, #127	@ 0x7f
 8000774:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        SSD1351_WriteData(data, sizeof(data));
 8000778:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800077c:	2101      	movs	r1, #1
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff ff6a 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA0); // SETREMAP
 8000784:	20a0      	movs	r0, #160	@ 0xa0
 8000786:	f7ff ff4d 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x74 };
 800078a:	2374      	movs	r3, #116	@ 0x74
 800078c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        SSD1351_WriteData(data, sizeof(data));
 8000790:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000794:	2101      	movs	r1, #1
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff ff5e 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x15); // SETCOLUMN
 800079c:	2015      	movs	r0, #21
 800079e:	f7ff ff41 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 80007a2:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 80007a6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        SSD1351_WriteData(data, sizeof(data));
 80007a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ac:	2102      	movs	r1, #2
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff52 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0x75); // SETROW
 80007b4:	2075      	movs	r0, #117	@ 0x75
 80007b6:	f7ff ff35 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x7F };
 80007ba:	f44f 43fe 	mov.w	r3, #32512	@ 0x7f00
 80007be:	853b      	strh	r3, [r7, #40]	@ 0x28
        SSD1351_WriteData(data, sizeof(data));
 80007c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007c4:	2102      	movs	r1, #2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff46 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA1); // STARTLINE
 80007cc:	20a1      	movs	r0, #161	@ 0xa1
 80007ce:	f7ff ff29 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 }; // 96 if display height == 96
 80007d2:	2300      	movs	r3, #0
 80007d4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        SSD1351_WriteData(data, sizeof(data));
 80007d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ff3a 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA2); // DISPLAYOFFSET
 80007e4:	20a2      	movs	r0, #162	@ 0xa2
 80007e6:	f7ff ff1d 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80007ea:	2300      	movs	r3, #0
 80007ec:	f887 3020 	strb.w	r3, [r7, #32]
        SSD1351_WriteData(data, sizeof(data));
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	2101      	movs	r1, #1
 80007f6:	4618      	mov	r0, r3
 80007f8:	f7ff ff2e 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB5); // SETGPIO
 80007fc:	20b5      	movs	r0, #181	@ 0xb5
 80007fe:	f7ff ff11 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000802:	2300      	movs	r3, #0
 8000804:	773b      	strb	r3, [r7, #28]
        SSD1351_WriteData(data, sizeof(data));
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff23 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAB); // FUNCTIONSELECT
 8000812:	20ab      	movs	r0, #171	@ 0xab
 8000814:	f7ff ff06 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000818:	2301      	movs	r3, #1
 800081a:	763b      	strb	r3, [r7, #24]
        SSD1351_WriteData(data, sizeof(data));
 800081c:	f107 0318 	add.w	r3, r7, #24
 8000820:	2101      	movs	r1, #1
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff18 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB1); // PRECHARGE
 8000828:	20b1      	movs	r0, #177	@ 0xb1
 800082a:	f7ff fefb 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x32 };
 800082e:	2332      	movs	r3, #50	@ 0x32
 8000830:	753b      	strb	r3, [r7, #20]
        SSD1351_WriteData(data, sizeof(data));
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff ff0d 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xBE); // VCOMH
 800083e:	20be      	movs	r0, #190	@ 0xbe
 8000840:	f7ff fef0 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x05 };
 8000844:	2305      	movs	r3, #5
 8000846:	743b      	strb	r3, [r7, #16]
        SSD1351_WriteData(data, sizeof(data));
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	2101      	movs	r1, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff ff02 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xA6); // NORMALDISPLAY (don't invert)
 8000854:	20a6      	movs	r0, #166	@ 0xa6
 8000856:	f7ff fee5 	bl	8000624 <SSD1351_WriteCommand>
    SSD1351_WriteCommand(0xC1); // CONTRASTABC
 800085a:	20c1      	movs	r0, #193	@ 0xc1
 800085c:	f7ff fee2 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xC8, 0x80, 0xC8 };
 8000860:	4a1e      	ldr	r2, [pc, #120]	@ (80008dc <SSD1351_Init+0x1c0>)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	6812      	ldr	r2, [r2, #0]
 8000868:	4611      	mov	r1, r2
 800086a:	8019      	strh	r1, [r3, #0]
 800086c:	3302      	adds	r3, #2
 800086e:	0c12      	lsrs	r2, r2, #16
 8000870:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	2103      	movs	r1, #3
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff feed 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xC7); // CONTRASTMASTER
 800087e:	20c7      	movs	r0, #199	@ 0xc7
 8000880:	f7ff fed0 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x0F };
 8000884:	230f      	movs	r3, #15
 8000886:	723b      	strb	r3, [r7, #8]
        SSD1351_WriteData(data, sizeof(data));
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2101      	movs	r1, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fee2 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB4); // SETVSL
 8000894:	20b4      	movs	r0, #180	@ 0xb4
 8000896:	f7ff fec5 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0xA0, 0xB5, 0x55 };
 800089a:	4a11      	ldr	r2, [pc, #68]	@ (80008e0 <SSD1351_Init+0x1c4>)
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4611      	mov	r1, r2
 80008a2:	8019      	strh	r1, [r3, #0]
 80008a4:	3302      	adds	r3, #2
 80008a6:	0c12      	lsrs	r2, r2, #16
 80008a8:	701a      	strb	r2, [r3, #0]
        SSD1351_WriteData(data, sizeof(data));
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2103      	movs	r1, #3
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fed2 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xB6); // PRECHARGE2
 80008b4:	20b6      	movs	r0, #182	@ 0xb6
 80008b6:	f7ff feb5 	bl	8000624 <SSD1351_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 80008ba:	2301      	movs	r3, #1
 80008bc:	703b      	strb	r3, [r7, #0]
        SSD1351_WriteData(data, sizeof(data));
 80008be:	463b      	mov	r3, r7
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fec8 	bl	8000658 <SSD1351_WriteData>
    }
    SSD1351_WriteCommand(0xAF); // DISPLAYON
 80008c8:	20af      	movs	r0, #175	@ 0xaf
 80008ca:	f7ff feab 	bl	8000624 <SSD1351_WriteCommand>

    SSD1351_Unselect();
 80008ce:	f7ff fe79 	bl	80005c4 <SSD1351_Unselect>
}
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	@ 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	0800429c 	.word	0x0800429c
 80008e0:	080042a0 	.word	0x080042a0

080008e4 <SSD1351_WriteChar>:
    SSD1351_WriteData(data, sizeof(data));

    SSD1351_Unselect();
}

static void SSD1351_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80008e4:	b082      	sub	sp, #8
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b088      	sub	sp, #32
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
 80008f2:	460b      	mov	r3, r1
 80008f4:	80bb      	strh	r3, [r7, #4]
 80008f6:	4613      	mov	r3, r2
 80008f8:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    SSD1351_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80008fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008fe:	461a      	mov	r2, r3
 8000900:	88fb      	ldrh	r3, [r7, #6]
 8000902:	4413      	add	r3, r2
 8000904:	b29b      	uxth	r3, r3
 8000906:	3b01      	subs	r3, #1
 8000908:	b29a      	uxth	r2, r3
 800090a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800090e:	4619      	mov	r1, r3
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	440b      	add	r3, r1
 8000914:	b29b      	uxth	r3, r3
 8000916:	3b01      	subs	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	88b9      	ldrh	r1, [r7, #4]
 800091c:	88f8      	ldrh	r0, [r7, #6]
 800091e:	f7ff fec9 	bl	80006b4 <SSD1351_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	e041      	b.n	80009ac <SSD1351_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 8000928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	3b20      	subs	r3, #32
 800092e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000932:	fb01 f303 	mul.w	r3, r1, r3
 8000936:	4619      	mov	r1, r3
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	440b      	add	r3, r1
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000944:	2300      	movs	r3, #0
 8000946:	61bb      	str	r3, [r7, #24]
 8000948:	e027      	b.n	800099a <SSD1351_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	69bb      	ldr	r3, [r7, #24]
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d00e      	beq.n	8000978 <SSD1351_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800095a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800095c:	0a1b      	lsrs	r3, r3, #8
 800095e:	b29b      	uxth	r3, r3
 8000960:	b2db      	uxtb	r3, r3
 8000962:	743b      	strb	r3, [r7, #16]
 8000964:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000966:	b2db      	uxtb	r3, r3
 8000968:	747b      	strb	r3, [r7, #17]
                SSD1351_WriteData(data, sizeof(data));
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe71 	bl	8000658 <SSD1351_WriteData>
 8000976:	e00d      	b.n	8000994 <SSD1351_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000978:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800097a:	0a1b      	lsrs	r3, r3, #8
 800097c:	b29b      	uxth	r3, r3
 800097e:	b2db      	uxtb	r3, r3
 8000980:	733b      	strb	r3, [r7, #12]
 8000982:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000984:	b2db      	uxtb	r3, r3
 8000986:	737b      	strb	r3, [r7, #13]
                SSD1351_WriteData(data, sizeof(data));
 8000988:	f107 030c 	add.w	r3, r7, #12
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fe62 	bl	8000658 <SSD1351_WriteData>
        for(j = 0; j < font.width; j++) {
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	3301      	adds	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800099e:	461a      	mov	r2, r3
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d3d1      	bcc.n	800094a <SSD1351_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3301      	adds	r3, #1
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80009b0:	461a      	mov	r2, r3
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d3b7      	bcc.n	8000928 <SSD1351_WriteChar+0x44>
            }
        }
    }
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80009c4:	b002      	add	sp, #8
 80009c6:	4770      	bx	lr

080009c8 <SSD1351_WriteString>:

void SSD1351_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80009c8:	b082      	sub	sp, #8
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af04      	add	r7, sp, #16
 80009d0:	603a      	str	r2, [r7, #0]
 80009d2:	617b      	str	r3, [r7, #20]
 80009d4:	4603      	mov	r3, r0
 80009d6:	80fb      	strh	r3, [r7, #6]
 80009d8:	460b      	mov	r3, r1
 80009da:	80bb      	strh	r3, [r7, #4]
    SSD1351_Select();
 80009dc:	f7ff fde6 	bl	80005ac <SSD1351_Select>

    while(*str) {
 80009e0:	e02d      	b.n	8000a3e <SSD1351_WriteString+0x76>
        if(x + font.width >= SSD1351_WIDTH) {
 80009e2:	88fb      	ldrh	r3, [r7, #6]
 80009e4:	7d3a      	ldrb	r2, [r7, #20]
 80009e6:	4413      	add	r3, r2
 80009e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80009ea:	dd13      	ble.n	8000a14 <SSD1351_WriteString+0x4c>
            x = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80009f0:	7d7b      	ldrb	r3, [r7, #21]
 80009f2:	461a      	mov	r2, r3
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= SSD1351_HEIGHT) {
 80009fa:	88bb      	ldrh	r3, [r7, #4]
 80009fc:	7d7a      	ldrb	r2, [r7, #21]
 80009fe:	4413      	add	r3, r2
 8000a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a02:	dc21      	bgt.n	8000a48 <SSD1351_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b20      	cmp	r3, #32
 8000a0a:	d103      	bne.n	8000a14 <SSD1351_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	603b      	str	r3, [r7, #0]
                continue;
 8000a12:	e014      	b.n	8000a3e <SSD1351_WriteString+0x76>
            }
        }

        SSD1351_WriteChar(x, y, *str, font, color, bgcolor);
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	88b9      	ldrh	r1, [r7, #4]
 8000a1a:	88f8      	ldrh	r0, [r7, #6]
 8000a1c:	8c3b      	ldrh	r3, [r7, #32]
 8000a1e:	9302      	str	r3, [sp, #8]
 8000a20:	8bbb      	ldrh	r3, [r7, #28]
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	f7ff ff5b 	bl	80008e4 <SSD1351_WriteChar>
        x += font.width;
 8000a2e:	7d3b      	ldrb	r3, [r7, #20]
 8000a30:	461a      	mov	r2, r3
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4413      	add	r3, r2
 8000a36:	80fb      	strh	r3, [r7, #6]
        str++;
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1cd      	bne.n	80009e2 <SSD1351_WriteString+0x1a>
 8000a46:	e000      	b.n	8000a4a <SSD1351_WriteString+0x82>
                break;
 8000a48:	bf00      	nop
    }

    SSD1351_Unselect();
 8000a4a:	f7ff fdbb 	bl	80005c4 <SSD1351_Unselect>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a58:	b002      	add	sp, #8
 8000a5a:	4770      	bx	lr

08000a5c <SSD1351_FillRectangle>:

void SSD1351_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000a5c:	b590      	push	{r4, r7, lr}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4604      	mov	r4, r0
 8000a64:	4608      	mov	r0, r1
 8000a66:	4611      	mov	r1, r2
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4623      	mov	r3, r4
 8000a6c:	80fb      	strh	r3, [r7, #6]
 8000a6e:	4603      	mov	r3, r0
 8000a70:	80bb      	strh	r3, [r7, #4]
 8000a72:	460b      	mov	r3, r1
 8000a74:	807b      	strh	r3, [r7, #2]
 8000a76:	4613      	mov	r3, r2
 8000a78:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000a7a:	88fb      	ldrh	r3, [r7, #6]
 8000a7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a7e:	d852      	bhi.n	8000b26 <SSD1351_FillRectangle+0xca>
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a84:	d84f      	bhi.n	8000b26 <SSD1351_FillRectangle+0xca>
    if((x + w - 1) >= SSD1351_WIDTH) w = SSD1351_WIDTH - x;
 8000a86:	88fa      	ldrh	r2, [r7, #6]
 8000a88:	887b      	ldrh	r3, [r7, #2]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	2b80      	cmp	r3, #128	@ 0x80
 8000a8e:	dd03      	ble.n	8000a98 <SSD1351_FillRectangle+0x3c>
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000a96:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= SSD1351_HEIGHT) h = SSD1351_HEIGHT - y;
 8000a98:	88ba      	ldrh	r2, [r7, #4]
 8000a9a:	883b      	ldrh	r3, [r7, #0]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2b80      	cmp	r3, #128	@ 0x80
 8000aa0:	dd03      	ble.n	8000aaa <SSD1351_FillRectangle+0x4e>
 8000aa2:	88bb      	ldrh	r3, [r7, #4]
 8000aa4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000aa8:	803b      	strh	r3, [r7, #0]

    SSD1351_Select();
 8000aaa:	f7ff fd7f 	bl	80005ac <SSD1351_Select>
    SSD1351_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000aae:	88fa      	ldrh	r2, [r7, #6]
 8000ab0:	887b      	ldrh	r3, [r7, #2]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	3b01      	subs	r3, #1
 8000ab8:	b29c      	uxth	r4, r3
 8000aba:	88ba      	ldrh	r2, [r7, #4]
 8000abc:	883b      	ldrh	r3, [r7, #0]
 8000abe:	4413      	add	r3, r2
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	88b9      	ldrh	r1, [r7, #4]
 8000ac8:	88f8      	ldrh	r0, [r7, #6]
 8000aca:	4622      	mov	r2, r4
 8000acc:	f7ff fdf2 	bl	80006b4 <SSD1351_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000ad0:	8c3b      	ldrh	r3, [r7, #32]
 8000ad2:	0a1b      	lsrs	r3, r3, #8
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	733b      	strb	r3, [r7, #12]
 8000ada:	8c3b      	ldrh	r3, [r7, #32]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(SSD1351_DC_GPIO_Port, SSD1351_DC_Pin, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ae6:	4812      	ldr	r0, [pc, #72]	@ (8000b30 <SSD1351_FillRectangle+0xd4>)
 8000ae8:	f000 ff3c 	bl	8001964 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000aec:	883b      	ldrh	r3, [r7, #0]
 8000aee:	80bb      	strh	r3, [r7, #4]
 8000af0:	e013      	b.n	8000b1a <SSD1351_FillRectangle+0xbe>
        for(x = w; x > 0; x--) {
 8000af2:	887b      	ldrh	r3, [r7, #2]
 8000af4:	80fb      	strh	r3, [r7, #6]
 8000af6:	e00a      	b.n	8000b0e <SSD1351_FillRectangle+0xb2>
            HAL_SPI_Transmit(&SSD1351_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000af8:	f107 010c 	add.w	r1, r7, #12
 8000afc:	f04f 33ff 	mov.w	r3, #4294967295
 8000b00:	2202      	movs	r2, #2
 8000b02:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <SSD1351_FillRectangle+0xd8>)
 8000b04:	f002 f827 	bl	8002b56 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	3b01      	subs	r3, #1
 8000b0c:	80fb      	strh	r3, [r7, #6]
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d1f1      	bne.n	8000af8 <SSD1351_FillRectangle+0x9c>
    for(y = h; y > 0; y--) {
 8000b14:	88bb      	ldrh	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	80bb      	strh	r3, [r7, #4]
 8000b1a:	88bb      	ldrh	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d1e8      	bne.n	8000af2 <SSD1351_FillRectangle+0x96>
        }
    }

    SSD1351_Unselect();
 8000b20:	f7ff fd50 	bl	80005c4 <SSD1351_Unselect>
 8000b24:	e000      	b.n	8000b28 <SSD1351_FillRectangle+0xcc>
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000b26:	bf00      	nop
}
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd90      	pop	{r4, r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40020400 	.word	0x40020400
 8000b34:	200000a0 	.word	0x200000a0

08000b38 <SSD1351_DrawImage>:

void SSD1351_FillScreen(uint16_t color) {
    SSD1351_FillRectangle(0, 0, SSD1351_WIDTH, SSD1351_HEIGHT, color);
}

void SSD1351_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4604      	mov	r4, r0
 8000b40:	4608      	mov	r0, r1
 8000b42:	4611      	mov	r1, r2
 8000b44:	461a      	mov	r2, r3
 8000b46:	4623      	mov	r3, r4
 8000b48:	80fb      	strh	r3, [r7, #6]
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80bb      	strh	r3, [r7, #4]
 8000b4e:	460b      	mov	r3, r1
 8000b50:	807b      	strh	r3, [r7, #2]
 8000b52:	4613      	mov	r3, r2
 8000b54:	803b      	strh	r3, [r7, #0]
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b5a:	d82b      	bhi.n	8000bb4 <SSD1351_DrawImage+0x7c>
 8000b5c:	88bb      	ldrh	r3, [r7, #4]
 8000b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b60:	d828      	bhi.n	8000bb4 <SSD1351_DrawImage+0x7c>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 8000b62:	88fa      	ldrh	r2, [r7, #6]
 8000b64:	887b      	ldrh	r3, [r7, #2]
 8000b66:	4413      	add	r3, r2
 8000b68:	2b80      	cmp	r3, #128	@ 0x80
 8000b6a:	dc25      	bgt.n	8000bb8 <SSD1351_DrawImage+0x80>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 8000b6c:	88ba      	ldrh	r2, [r7, #4]
 8000b6e:	883b      	ldrh	r3, [r7, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	2b80      	cmp	r3, #128	@ 0x80
 8000b74:	dc22      	bgt.n	8000bbc <SSD1351_DrawImage+0x84>

    SSD1351_Select();
 8000b76:	f7ff fd19 	bl	80005ac <SSD1351_Select>
    SSD1351_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000b7a:	88fa      	ldrh	r2, [r7, #6]
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	4413      	add	r3, r2
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b29c      	uxth	r4, r3
 8000b86:	88ba      	ldrh	r2, [r7, #4]
 8000b88:	883b      	ldrh	r3, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	88b9      	ldrh	r1, [r7, #4]
 8000b94:	88f8      	ldrh	r0, [r7, #6]
 8000b96:	4622      	mov	r2, r4
 8000b98:	f7ff fd8c 	bl	80006b4 <SSD1351_SetAddressWindow>
    SSD1351_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8000b9c:	887b      	ldrh	r3, [r7, #2]
 8000b9e:	883a      	ldrh	r2, [r7, #0]
 8000ba0:	fb02 f303 	mul.w	r3, r2, r3
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	69b8      	ldr	r0, [r7, #24]
 8000baa:	f7ff fd55 	bl	8000658 <SSD1351_WriteData>
    SSD1351_Unselect();
 8000bae:	f7ff fd09 	bl	80005c4 <SSD1351_Unselect>
 8000bb2:	e004      	b.n	8000bbe <SSD1351_DrawImage+0x86>
    if((x >= SSD1351_WIDTH) || (y >= SSD1351_HEIGHT)) return;
 8000bb4:	bf00      	nop
 8000bb6:	e002      	b.n	8000bbe <SSD1351_DrawImage+0x86>
    if((x + w - 1) >= SSD1351_WIDTH) return;
 8000bb8:	bf00      	nop
 8000bba:	e000      	b.n	8000bbe <SSD1351_DrawImage+0x86>
    if((y + h - 1) >= SSD1351_HEIGHT) return;
 8000bbc:	bf00      	nop
}
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd90      	pop	{r4, r7, pc}

08000bc4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	60da      	str	r2, [r3, #12]
 8000bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	4a29      	ldr	r2, [pc, #164]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bea:	4b27      	ldr	r3, [pc, #156]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	607b      	str	r3, [r7, #4]
 8000bfa:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a22      	ldr	r2, [pc, #136]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	603b      	str	r3, [r7, #0]
 8000c16:	4b1c      	ldr	r3, [pc, #112]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c1c:	f043 0302 	orr.w	r3, r3, #2
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <MX_GPIO_Init+0xc4>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2110      	movs	r1, #16
 8000c32:	4816      	ldr	r0, [pc, #88]	@ (8000c8c <MX_GPIO_Init+0xc8>)
 8000c34:	f000 fe96 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DC_Pin|RES_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8000c3e:	4814      	ldr	r0, [pc, #80]	@ (8000c90 <MX_GPIO_Init+0xcc>)
 8000c40:	f000 fe90 	bl	8001964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8000c44:	2310      	movs	r3, #16
 8000c46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c50:	2303      	movs	r3, #3
 8000c52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8000c54:	f107 030c 	add.w	r3, r7, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <MX_GPIO_Init+0xc8>)
 8000c5c:	f000 fce6 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_Pin RES_Pin */
  GPIO_InitStruct.Pin = DC_Pin|RES_Pin;
 8000c60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_GPIO_Init+0xcc>)
 8000c7a:	f000 fcd7 	bl	800162c <HAL_GPIO_Init>

}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400

08000c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9a:	f000 fb4b 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c9e:	f000 f83b 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca2:	f7ff ff8f 	bl	8000bc4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ca6:	f000 f9dd 	bl	8001064 <MX_SPI1_Init>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b17      	ldr	r3, [pc, #92]	@ (8000d0c <main+0x78>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	4a16      	ldr	r2, [pc, #88]	@ (8000d0c <main+0x78>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cba:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <main+0x78>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  HAL_PWR_EnableBkUpAccess();
 8000cc6:	f000 fe67 	bl	8001998 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_BACKUPRESET_FORCE();
 8000cca:	4b11      	ldr	r3, [pc, #68]	@ (8000d10 <main+0x7c>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	601a      	str	r2, [r3, #0]
  __HAL_RCC_BACKUPRESET_RELEASE();
 8000cd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <main+0x7c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
  MX_RTC_Init();
 8000cd6:	f000 f975 	bl	8000fc4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RTC_SetFromBuildTime();
 8000cda:	f000 f87d 	bl	8000dd8 <RTC_SetFromBuildTime>
	SSD1351_Unselect();
 8000cde:	f7ff fc71 	bl	80005c4 <SSD1351_Unselect>
	HAL_Delay(10);
 8000ce2:	200a      	movs	r0, #10
 8000ce4:	f000 fb98 	bl	8001418 <HAL_Delay>
	SSD1351_Init();
 8000ce8:	f7ff fd18 	bl	800071c <SSD1351_Init>
	SSD1351_DrawImage(0, 0, 128, 128,(const uint16_t*) unio_logo_fixed_128_map);
 8000cec:	4b09      	ldr	r3, [pc, #36]	@ (8000d14 <main+0x80>)
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff1e 	bl	8000b38 <SSD1351_DrawImage>
	HAL_Delay(3000);
 8000cfc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000d00:	f000 fb8a 	bl	8001418 <HAL_Delay>


	ShowClockLoop();
 8000d04:	f000 f904 	bl	8000f10 <ShowClockLoop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <main+0x74>
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	42470e40 	.word	0x42470e40
 8000d14:	08005674 	.word	0x08005674

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	@ 0x50
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 0320 	add.w	r3, r7, #32
 8000d22:	2230      	movs	r2, #48	@ 0x30
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f99a 	bl	8003060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	4a22      	ldr	r2, [pc, #136]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4c:	4b20      	ldr	r3, [pc, #128]	@ (8000dd0 <SystemClock_Config+0xb8>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d58:	2300      	movs	r3, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <SystemClock_Config+0xbc>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd4 <SystemClock_Config+0xbc>)
 8000d62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d66:	6013      	str	r3, [r2, #0]
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <SystemClock_Config+0xbc>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000d74:	2306      	movs	r3, #6
 8000d76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d80:	2310      	movs	r3, #16
 8000d82:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d88:	f107 0320 	add.w	r3, r7, #32
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f000 fe17 	bl	80019c0 <HAL_RCC_OscConfig>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d98:	f000 f90e 	bl	8000fb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d9c:	230f      	movs	r3, #15
 8000d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000da0:	2300      	movs	r3, #0
 8000da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 f87a 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dc2:	f000 f8f9 	bl	8000fb8 <Error_Handler>
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	3750      	adds	r7, #80	@ 0x50
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	40007000 	.word	0x40007000

08000dd8 <RTC_SetFromBuildTime>:

/* USER CODE BEGIN 4 */
static void RTC_SetFromBuildTime(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b092      	sub	sp, #72	@ 0x48
 8000ddc:	af02      	add	r7, sp, #8
    // 이미 설정했으면 패스
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBEEF) return;
 8000dde:	2100      	movs	r1, #0
 8000de0:	4844      	ldr	r0, [pc, #272]	@ (8000ef4 <RTC_SetFromBuildTime+0x11c>)
 8000de2:	f001 fe17 	bl	8002a14 <HAL_RTCEx_BKUPRead>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f64b 62ef 	movw	r2, #48879	@ 0xbeef
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d076      	beq.n	8000ede <RTC_SetFromBuildTime+0x106>

    RTC_TimeTypeDef sTime = {0};
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]

    // __DATE__ 예: "Aug 14 2025"
    // __TIME__ 예: "16:52:31"
    char monStr[4] = {0};
 8000e04:	2300      	movs	r3, #0
 8000e06:	61bb      	str	r3, [r7, #24]
    int day=0, year=0, hh=0, mm=0, ss=0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]

    if (sscanf(__DATE__, "%3s %d %d", monStr, &day, &year) != 3) return;
 8000e1c:	f107 0114 	add.w	r1, r7, #20
 8000e20:	f107 0218 	add.w	r2, r7, #24
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	9300      	str	r3, [sp, #0]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4932      	ldr	r1, [pc, #200]	@ (8000ef8 <RTC_SetFromBuildTime+0x120>)
 8000e2e:	4833      	ldr	r0, [pc, #204]	@ (8000efc <RTC_SetFromBuildTime+0x124>)
 8000e30:	f002 f8e8 	bl	8003004 <siscanf>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d153      	bne.n	8000ee2 <RTC_SetFromBuildTime+0x10a>
    if (sscanf(__TIME__, "%d:%d:%d", &hh, &mm, &ss) != 3) return;
 8000e3a:	f107 0108 	add.w	r1, r7, #8
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	460b      	mov	r3, r1
 8000e48:	492d      	ldr	r1, [pc, #180]	@ (8000f00 <RTC_SetFromBuildTime+0x128>)
 8000e4a:	482e      	ldr	r0, [pc, #184]	@ (8000f04 <RTC_SetFromBuildTime+0x12c>)
 8000e4c:	f002 f8da 	bl	8003004 <siscanf>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b03      	cmp	r3, #3
 8000e54:	d147      	bne.n	8000ee6 <RTC_SetFromBuildTime+0x10e>

    // 월 문자열 → 숫자
    const char *mons = "JanFebMarAprMayJunJulAugSepOctNovDec";
 8000e56:	4b2c      	ldr	r3, [pc, #176]	@ (8000f08 <RTC_SetFromBuildTime+0x130>)
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const char *p = strstr(mons, monStr);
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e62:	f002 f905 	bl	8003070 <strstr>
 8000e66:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (!p) return;
 8000e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d03d      	beq.n	8000eea <RTC_SetFromBuildTime+0x112>
    int month = (int)((p - mons) / 3) + 1;
 8000e6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000e70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	4a25      	ldr	r2, [pc, #148]	@ (8000f0c <RTC_SetFromBuildTime+0x134>)
 8000e76:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7a:	17db      	asrs	r3, r3, #31
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	3301      	adds	r3, #1
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34

    // 시간 설정
    sTime.Hours   = (uint8_t)hh;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	f887 3020 	strb.w	r3, [r7, #32]
    sTime.Minutes = (uint8_t)mm;
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    sTime.Seconds = (uint8_t)ss;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e9a:	f107 0320 	add.w	r3, r7, #32
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4814      	ldr	r0, [pc, #80]	@ (8000ef4 <RTC_SetFromBuildTime+0x11c>)
 8000ea4:	f001 fb13 	bl	80024ce <HAL_RTC_SetTime>

    // 날짜 설정 (YY 기준)
    sDate.Year  = (uint8_t)(year - 2000);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	3330      	adds	r3, #48	@ 0x30
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	77fb      	strb	r3, [r7, #31]
    sDate.Month = (uint8_t)month;
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	777b      	strb	r3, [r7, #29]
    sDate.Date  = (uint8_t)day;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	77bb      	strb	r3, [r7, #30]
    sDate.WeekDay = RTC_WEEKDAY_MONDAY; // 굳이 정확치 않아도 됨
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	773b      	strb	r3, [r7, #28]
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480a      	ldr	r0, [pc, #40]	@ (8000ef4 <RTC_SetFromBuildTime+0x11c>)
 8000ecc:	f001 fbf7 	bl	80026be <HAL_RTC_SetDate>

    // “설정 완료” 마킹
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, 0xBEEF);
 8000ed0:	f64b 62ef 	movw	r2, #48879	@ 0xbeef
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4807      	ldr	r0, [pc, #28]	@ (8000ef4 <RTC_SetFromBuildTime+0x11c>)
 8000ed8:	f001 fd82 	bl	80029e0 <HAL_RTCEx_BKUPWrite>
 8000edc:	e006      	b.n	8000eec <RTC_SetFromBuildTime+0x114>
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) == 0xBEEF) return;
 8000ede:	bf00      	nop
 8000ee0:	e004      	b.n	8000eec <RTC_SetFromBuildTime+0x114>
    if (sscanf(__DATE__, "%3s %d %d", monStr, &day, &year) != 3) return;
 8000ee2:	bf00      	nop
 8000ee4:	e002      	b.n	8000eec <RTC_SetFromBuildTime+0x114>
    if (sscanf(__TIME__, "%d:%d:%d", &hh, &mm, &ss) != 3) return;
 8000ee6:	bf00      	nop
 8000ee8:	e000      	b.n	8000eec <RTC_SetFromBuildTime+0x114>
    if (!p) return;
 8000eea:	bf00      	nop
}
 8000eec:	3740      	adds	r7, #64	@ 0x40
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000080 	.word	0x20000080
 8000ef8:	080042a4 	.word	0x080042a4
 8000efc:	080042b0 	.word	0x080042b0
 8000f00:	080042bc 	.word	0x080042bc
 8000f04:	080042c8 	.word	0x080042c8
 8000f08:	080042d4 	.word	0x080042d4
 8000f0c:	55555556 	.word	0x55555556

08000f10 <ShowClockLoop>:


static void ShowClockLoop(void)
{
 8000f10:	b590      	push	{r4, r7, lr}
 8000f12:	b091      	sub	sp, #68	@ 0x44
 8000f14:	af04      	add	r7, sp, #16
    char buf[16];
    RTC_TimeTypeDef t;
    RTC_DateTypeDef d;

    // "HH:MM:SS" = 8글자 → 중앙 정렬 좌표
    uint16_t w = Font_16x26.width * 8;
 8000f16:	4b25      	ldr	r3, [pc, #148]	@ (8000fac <ShowClockLoop+0x9c>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    uint16_t h = Font_16x26.height;
 8000f1e:	4b23      	ldr	r3, [pc, #140]	@ (8000fac <ShowClockLoop+0x9c>)
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    uint16_t x = (128 - w) / 2;
 8000f24:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000f26:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000f2a:	0fda      	lsrs	r2, r3, #31
 8000f2c:	4413      	add	r3, r2
 8000f2e:	105b      	asrs	r3, r3, #1
 8000f30:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint16_t y = (128 - h) / 2;
 8000f32:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f34:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000f38:	0fda      	lsrs	r2, r3, #31
 8000f3a:	4413      	add	r3, r2
 8000f3c:	105b      	asrs	r3, r3, #1
 8000f3e:	853b      	strh	r3, [r7, #40]	@ 0x28

    while (1) {
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	4619      	mov	r1, r3
 8000f46:	481a      	ldr	r0, [pc, #104]	@ (8000fb0 <ShowClockLoop+0xa0>)
 8000f48:	f001 fb5b 	bl	8002602 <HAL_RTC_GetTime>
        HAL_RTC_GetDate(&hrtc, &d, RTC_FORMAT_BIN); // 반드시 Time 다음에 호출
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	4619      	mov	r1, r3
 8000f52:	4817      	ldr	r0, [pc, #92]	@ (8000fb0 <ShowClockLoop+0xa0>)
 8000f54:	f001 fc37 	bl	80027c6 <HAL_RTC_GetDate>

        snprintf(buf, sizeof(buf), "%02u:%02u:%02u",
                 t.Hours, t.Minutes, t.Seconds);
 8000f58:	793b      	ldrb	r3, [r7, #4]
        snprintf(buf, sizeof(buf), "%02u:%02u:%02u",
 8000f5a:	4619      	mov	r1, r3
                 t.Hours, t.Minutes, t.Seconds);
 8000f5c:	797b      	ldrb	r3, [r7, #5]
 8000f5e:	79ba      	ldrb	r2, [r7, #6]
        snprintf(buf, sizeof(buf), "%02u:%02u:%02u",
 8000f60:	f107 0018 	add.w	r0, r7, #24
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4a12      	ldr	r2, [pc, #72]	@ (8000fb4 <ShowClockLoop+0xa4>)
 8000f6c:	2110      	movs	r1, #16
 8000f6e:	f002 f813 	bl	8002f98 <sniprintf>

        // 이전 숫자 영역만 지우고 → 새로 쓰기(잔상 방지)
        SSD1351_FillRectangle(x, y, w, h, SSD1351_BLACK);
 8000f72:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000f74:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000f76:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000f78:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8000f7a:	2400      	movs	r4, #0
 8000f7c:	9400      	str	r4, [sp, #0]
 8000f7e:	f7ff fd6d 	bl	8000a5c <SSD1351_FillRectangle>
        SSD1351_WriteString(x, y, buf, Font_16x26,
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <ShowClockLoop+0x9c>)
 8000f84:	f107 0418 	add.w	r4, r7, #24
 8000f88:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000f8a:	8d78      	ldrh	r0, [r7, #42]	@ 0x2a
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9202      	str	r2, [sp, #8]
 8000f90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	9200      	str	r2, [sp, #0]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4622      	mov	r2, r4
 8000f9e:	f7ff fd13 	bl	80009c8 <SSD1351_WriteString>
                            SSD1351_WHITE, SSD1351_BLACK);

        HAL_Delay(200); // 5Hz 갱신(원하면 1000으로)
 8000fa2:	20c8      	movs	r0, #200	@ 0xc8
 8000fa4:	f000 fa38 	bl	8001418 <HAL_Delay>
        HAL_RTC_GetTime(&hrtc, &t, RTC_FORMAT_BIN);
 8000fa8:	bf00      	nop
 8000faa:	e7c9      	b.n	8000f40 <ShowClockLoop+0x30>
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000080 	.word	0x20000080
 8000fb4:	080042fc 	.word	0x080042fc

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fbc:	b672      	cpsid	i
}
 8000fbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <Error_Handler+0x8>

08000fc4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <MX_RTC_Init+0x48>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fd6:	227f      	movs	r2, #127	@ 0x7f
 8000fd8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fdc:	22ff      	movs	r2, #255	@ 0xff
 8000fde:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_RTC_Init+0x44>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_RTC_Init+0x44>)
 8000ff4:	f001 f9ea 	bl	80023cc <HAL_RTC_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ffe:	f7ff ffdb 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000080 	.word	0x20000080
 800100c:	40002800 	.word	0x40002800

08001010 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001018:	f107 0308 	add.w	r3, r7, #8
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a0c      	ldr	r2, [pc, #48]	@ (800105c <HAL_RTC_MspInit+0x4c>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d111      	bne.n	8001054 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001034:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001038:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	4618      	mov	r0, r3
 8001040:	f001 f8e2 	bl	8002208 <HAL_RCCEx_PeriphCLKConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800104a:	f7ff ffb5 	bl	8000fb8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <HAL_RTC_MspInit+0x50>)
 8001050:	2201      	movs	r2, #1
 8001052:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3718      	adds	r7, #24
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40002800 	.word	0x40002800
 8001060:	42470e3c 	.word	0x42470e3c

08001064 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001068:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800106a:	4a18      	ldr	r2, [pc, #96]	@ (80010cc <MX_SPI1_Init+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001074:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001088:	4b0f      	ldr	r3, [pc, #60]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001090:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001094:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001096:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_SPI1_Init+0x64>)
 8001098:	2210      	movs	r2, #16
 800109a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <MX_SPI1_Init+0x64>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a8:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010ae:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010b0:	220a      	movs	r2, #10
 80010b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010b4:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <MX_SPI1_Init+0x64>)
 80010b6:	f001 fcc5 	bl	8002a44 <HAL_SPI_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010c0:	f7ff ff7a 	bl	8000fb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	200000a0 	.word	0x200000a0
 80010cc:	40013000 	.word	0x40013000

080010d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	@ 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <HAL_SPI_MspInit+0xc0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d149      	bne.n	8001186 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b27      	ldr	r3, [pc, #156]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	4a26      	ldr	r2, [pc, #152]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 80010fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001100:	6453      	str	r3, [r2, #68]	@ 0x44
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b20      	ldr	r3, [pc, #128]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b19      	ldr	r3, [pc, #100]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a18      	ldr	r2, [pc, #96]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HAL_SPI_MspInit+0xc4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001146:	2360      	movs	r3, #96	@ 0x60
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001156:	2305      	movs	r3, #5
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	@ (8001198 <HAL_SPI_MspInit+0xc8>)
 8001162:	f000 fa63 	bl	800162c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001166:	2320      	movs	r3, #32
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001172:	2303      	movs	r3, #3
 8001174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001176:	2305      	movs	r3, #5
 8001178:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4806      	ldr	r0, [pc, #24]	@ (800119c <HAL_SPI_MspInit+0xcc>)
 8001182:	f000 fa53 	bl	800162c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40013000 	.word	0x40013000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000
 800119c:	40020400 	.word	0x40020400

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	@ (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <NMI_Handler+0x4>

080011f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <MemManage_Handler+0x4>

08001208 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <BusFault_Handler+0x4>

08001210 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001214:	bf00      	nop
 8001216:	e7fd      	b.n	8001214 <UsageFault_Handler+0x4>

08001218 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001246:	f000 f8c7 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001258:	4a14      	ldr	r2, [pc, #80]	@ (80012ac <_sbrk+0x5c>)
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <_sbrk+0x60>)
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001264:	4b13      	ldr	r3, [pc, #76]	@ (80012b4 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d102      	bne.n	8001272 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800126c:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <_sbrk+0x64>)
 800126e:	4a12      	ldr	r2, [pc, #72]	@ (80012b8 <_sbrk+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <_sbrk+0x64>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4413      	add	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	429a      	cmp	r2, r3
 800127e:	d207      	bcs.n	8001290 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001280:	f001 ff0c 	bl	800309c <__errno>
 8001284:	4603      	mov	r3, r0
 8001286:	220c      	movs	r2, #12
 8001288:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e009      	b.n	80012a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001290:	4b08      	ldr	r3, [pc, #32]	@ (80012b4 <_sbrk+0x64>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001296:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <_sbrk+0x64>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4413      	add	r3, r2
 800129e:	4a05      	ldr	r2, [pc, #20]	@ (80012b4 <_sbrk+0x64>)
 80012a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012a2:	68fb      	ldr	r3, [r7, #12]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3718      	adds	r7, #24
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20020000 	.word	0x20020000
 80012b0:	00000400 	.word	0x00000400
 80012b4:	200000f8 	.word	0x200000f8
 80012b8:	20000248 	.word	0x20000248

080012bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c0:	4b06      	ldr	r3, [pc, #24]	@ (80012dc <SystemInit+0x20>)
 80012c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012c6:	4a05      	ldr	r2, [pc, #20]	@ (80012dc <SystemInit+0x20>)
 80012c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001318 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012e4:	f7ff ffea 	bl	80012bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012e8:	480c      	ldr	r0, [pc, #48]	@ (800131c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ea:	490d      	ldr	r1, [pc, #52]	@ (8001320 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f0:	e002      	b.n	80012f8 <LoopCopyDataInit>

080012f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f6:	3304      	adds	r3, #4

080012f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012fc:	d3f9      	bcc.n	80012f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001300:	4c0a      	ldr	r4, [pc, #40]	@ (800132c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001304:	e001      	b.n	800130a <LoopFillZerobss>

08001306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001308:	3204      	adds	r2, #4

0800130a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800130c:	d3fb      	bcc.n	8001306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800130e:	f001 fecb 	bl	80030a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001312:	f7ff fcbf 	bl	8000c94 <main>
  bx  lr    
 8001316:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001324:	0800d7d4 	.word	0x0800d7d4
  ldr r2, =_sbss
 8001328:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800132c:	20000248 	.word	0x20000248

08001330 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC_IRQHandler>
	...

08001334 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001338:	4b0e      	ldr	r3, [pc, #56]	@ (8001374 <HAL_Init+0x40>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0d      	ldr	r2, [pc, #52]	@ (8001374 <HAL_Init+0x40>)
 800133e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001342:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001344:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0a      	ldr	r2, [pc, #40]	@ (8001374 <HAL_Init+0x40>)
 800134a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800134e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <HAL_Init+0x40>)
 8001356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800135a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f931 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff ff1a 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40023c00 	.word	0x40023c00

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f93b 	bl	8001612 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f911 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	@ (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000008 	.word	0x20000008
 80013d0:	20000010 	.word	0x20000010
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	@ (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	200000fc 	.word	0x200000fc

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	@ (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	200000fc 	.word	0x200000fc

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	@ (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000010 	.word	0x20000010

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	@ (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	@ (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff47 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff5c 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffb0 	bl	8001580 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	@ 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e16b      	b.n	8001920 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 815a 	bne.w	800191a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80b4 	beq.w	800191a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b60      	ldr	r3, [pc, #384]	@ (8001938 <HAL_GPIO_Init+0x30c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001938 <HAL_GPIO_Init+0x30c>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001938 <HAL_GPIO_Init+0x30c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a5b      	ldr	r2, [pc, #364]	@ (800193c <HAL_GPIO_Init+0x310>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a52      	ldr	r2, [pc, #328]	@ (8001940 <HAL_GPIO_Init+0x314>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d02b      	beq.n	8001852 <HAL_GPIO_Init+0x226>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a51      	ldr	r2, [pc, #324]	@ (8001944 <HAL_GPIO_Init+0x318>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d025      	beq.n	800184e <HAL_GPIO_Init+0x222>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a50      	ldr	r2, [pc, #320]	@ (8001948 <HAL_GPIO_Init+0x31c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d01f      	beq.n	800184a <HAL_GPIO_Init+0x21e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4f      	ldr	r2, [pc, #316]	@ (800194c <HAL_GPIO_Init+0x320>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d019      	beq.n	8001846 <HAL_GPIO_Init+0x21a>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4e      	ldr	r2, [pc, #312]	@ (8001950 <HAL_GPIO_Init+0x324>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d013      	beq.n	8001842 <HAL_GPIO_Init+0x216>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4d      	ldr	r2, [pc, #308]	@ (8001954 <HAL_GPIO_Init+0x328>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d00d      	beq.n	800183e <HAL_GPIO_Init+0x212>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4c      	ldr	r2, [pc, #304]	@ (8001958 <HAL_GPIO_Init+0x32c>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d007      	beq.n	800183a <HAL_GPIO_Init+0x20e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4b      	ldr	r2, [pc, #300]	@ (800195c <HAL_GPIO_Init+0x330>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d101      	bne.n	8001836 <HAL_GPIO_Init+0x20a>
 8001832:	2307      	movs	r3, #7
 8001834:	e00e      	b.n	8001854 <HAL_GPIO_Init+0x228>
 8001836:	2308      	movs	r3, #8
 8001838:	e00c      	b.n	8001854 <HAL_GPIO_Init+0x228>
 800183a:	2306      	movs	r3, #6
 800183c:	e00a      	b.n	8001854 <HAL_GPIO_Init+0x228>
 800183e:	2305      	movs	r3, #5
 8001840:	e008      	b.n	8001854 <HAL_GPIO_Init+0x228>
 8001842:	2304      	movs	r3, #4
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x228>
 8001846:	2303      	movs	r3, #3
 8001848:	e004      	b.n	8001854 <HAL_GPIO_Init+0x228>
 800184a:	2302      	movs	r3, #2
 800184c:	e002      	b.n	8001854 <HAL_GPIO_Init+0x228>
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_GPIO_Init+0x228>
 8001852:	2300      	movs	r3, #0
 8001854:	69fa      	ldr	r2, [r7, #28]
 8001856:	f002 0203 	and.w	r2, r2, #3
 800185a:	0092      	lsls	r2, r2, #2
 800185c:	4093      	lsls	r3, r2
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001864:	4935      	ldr	r1, [pc, #212]	@ (800193c <HAL_GPIO_Init+0x310>)
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	089b      	lsrs	r3, r3, #2
 800186a:	3302      	adds	r3, #2
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001872:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <HAL_GPIO_Init+0x334>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	43db      	mvns	r3, r3
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	4013      	ands	r3, r2
 8001880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001896:	4a32      	ldr	r2, [pc, #200]	@ (8001960 <HAL_GPIO_Init+0x334>)
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800189c:	4b30      	ldr	r3, [pc, #192]	@ (8001960 <HAL_GPIO_Init+0x334>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018c0:	4a27      	ldr	r2, [pc, #156]	@ (8001960 <HAL_GPIO_Init+0x334>)
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018c6:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_GPIO_Init+0x334>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001960 <HAL_GPIO_Init+0x334>)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001960 <HAL_GPIO_Init+0x334>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001914:	4a12      	ldr	r2, [pc, #72]	@ (8001960 <HAL_GPIO_Init+0x334>)
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3301      	adds	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	f67f ae90 	bls.w	8001648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	3724      	adds	r7, #36	@ 0x24
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40013800 	.word	0x40013800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020400 	.word	0x40020400
 8001948:	40020800 	.word	0x40020800
 800194c:	40020c00 	.word	0x40020c00
 8001950:	40021000 	.word	0x40021000
 8001954:	40021400 	.word	0x40021400
 8001958:	40021800 	.word	0x40021800
 800195c:	40021c00 	.word	0x40021c00
 8001960:	40013c00 	.word	0x40013c00

08001964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
 8001970:	4613      	mov	r3, r2
 8001972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800197a:	887a      	ldrh	r2, [r7, #2]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001980:	e003      	b.n	800198a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001982:	887b      	ldrh	r3, [r7, #2]
 8001984:	041a      	lsls	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	619a      	str	r2, [r3, #24]
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
	...

08001998 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	@ (80019b8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_PWR_EnableBkUpAccess+0x24>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80019aa:	687b      	ldr	r3, [r7, #4]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	420e0020 	.word	0x420e0020
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e267      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d075      	beq.n	8001aca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019de:	4b88      	ldr	r3, [pc, #544]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d00c      	beq.n	8001a04 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ea:	4b85      	ldr	r3, [pc, #532]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d112      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019f6:	4b82      	ldr	r3, [pc, #520]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a02:	d10b      	bne.n	8001a1c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a04:	4b7e      	ldr	r3, [pc, #504]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d05b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x108>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d157      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e242      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a24:	d106      	bne.n	8001a34 <HAL_RCC_OscConfig+0x74>
 8001a26:	4b76      	ldr	r3, [pc, #472]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a75      	ldr	r2, [pc, #468]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e01d      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b70      	ldr	r3, [pc, #448]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a6f      	ldr	r2, [pc, #444]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a6c      	ldr	r2, [pc, #432]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e00b      	b.n	8001a70 <HAL_RCC_OscConfig+0xb0>
 8001a58:	4b69      	ldr	r3, [pc, #420]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a68      	ldr	r2, [pc, #416]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	4b66      	ldr	r3, [pc, #408]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a65      	ldr	r2, [pc, #404]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fcc2 	bl	8001400 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a80:	f7ff fcbe 	bl	8001400 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b64      	cmp	r3, #100	@ 0x64
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e207      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	4b5b      	ldr	r3, [pc, #364]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0xc0>
 8001a9e:	e014      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fcae 	bl	8001400 <HAL_GetTick>
 8001aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e008      	b.n	8001aba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fcaa 	bl	8001400 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b64      	cmp	r3, #100	@ 0x64
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e1f3      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	4b51      	ldr	r3, [pc, #324]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0xe8>
 8001ac6:	e000      	b.n	8001aca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d063      	beq.n	8001b9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ad6:	4b4a      	ldr	r3, [pc, #296]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d00b      	beq.n	8001afa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ae2:	4b47      	ldr	r3, [pc, #284]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001aea:	2b08      	cmp	r3, #8
 8001aec:	d11c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001aee:	4b44      	ldr	r3, [pc, #272]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d116      	bne.n	8001b28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001afa:	4b41      	ldr	r3, [pc, #260]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e1c7      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b3b      	ldr	r3, [pc, #236]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4937      	ldr	r1, [pc, #220]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b26:	e03a      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b34      	ldr	r3, [pc, #208]	@ (8001c04 <HAL_RCC_OscConfig+0x244>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b36:	f7ff fc63 	bl	8001400 <HAL_GetTick>
 8001b3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	e008      	b.n	8001b50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3e:	f7ff fc5f 	bl	8001400 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d901      	bls.n	8001b50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b4c:	2303      	movs	r3, #3
 8001b4e:	e1a8      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	4b2b      	ldr	r3, [pc, #172]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0f0      	beq.n	8001b3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b5c:	4b28      	ldr	r3, [pc, #160]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4925      	ldr	r1, [pc, #148]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	600b      	str	r3, [r1, #0]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b72:	4b24      	ldr	r3, [pc, #144]	@ (8001c04 <HAL_RCC_OscConfig+0x244>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b78:	f7ff fc42 	bl	8001400 <HAL_GetTick>
 8001b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc3e 	bl	8001400 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e187      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	4b1b      	ldr	r3, [pc, #108]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1f0      	bne.n	8001b80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0308 	and.w	r3, r3, #8
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d036      	beq.n	8001c18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d016      	beq.n	8001be0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_RCC_OscConfig+0x248>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb8:	f7ff fc22 	bl	8001400 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	e008      	b.n	8001bd2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc0:	f7ff fc1e 	bl	8001400 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d901      	bls.n	8001bd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001bce:	2303      	movs	r3, #3
 8001bd0:	e167      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_RCC_OscConfig+0x240>)
 8001bd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d0f0      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x200>
 8001bde:	e01b      	b.n	8001c18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001be0:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_OscConfig+0x248>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff fc0b 	bl	8001400 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bec:	e00e      	b.n	8001c0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bee:	f7ff fc07 	bl	8001400 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d907      	bls.n	8001c0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e150      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
 8001c00:	40023800 	.word	0x40023800
 8001c04:	42470000 	.word	0x42470000
 8001c08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c0c:	4b88      	ldr	r3, [pc, #544]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ea      	bne.n	8001bee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8097 	beq.w	8001d54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b81      	ldr	r3, [pc, #516]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10f      	bne.n	8001c56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	4b7d      	ldr	r3, [pc, #500]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a7c      	ldr	r2, [pc, #496]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	4b7a      	ldr	r3, [pc, #488]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c56:	4b77      	ldr	r3, [pc, #476]	@ (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d118      	bne.n	8001c94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c62:	4b74      	ldr	r3, [pc, #464]	@ (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a73      	ldr	r2, [pc, #460]	@ (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fbc7 	bl	8001400 <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c76:	f7ff fbc3 	bl	8001400 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e10c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	4b6a      	ldr	r3, [pc, #424]	@ (8001e34 <HAL_RCC_OscConfig+0x474>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d106      	bne.n	8001caa <HAL_RCC_OscConfig+0x2ea>
 8001c9c:	4b64      	ldr	r3, [pc, #400]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca0:	4a63      	ldr	r2, [pc, #396]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x324>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b05      	cmp	r3, #5
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x30c>
 8001cb2:	4b5f      	ldr	r3, [pc, #380]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb6:	4a5e      	ldr	r2, [pc, #376]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cb8:	f043 0304 	orr.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cbe:	4b5c      	ldr	r3, [pc, #368]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc2:	4a5b      	ldr	r2, [pc, #364]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x324>
 8001ccc:	4b58      	ldr	r3, [pc, #352]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd0:	4a57      	ldr	r2, [pc, #348]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cd2:	f023 0301 	bic.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cd8:	4b55      	ldr	r3, [pc, #340]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cdc:	4a54      	ldr	r2, [pc, #336]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001cde:	f023 0304 	bic.w	r3, r3, #4
 8001ce2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cec:	f7ff fb88 	bl	8001400 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf4:	f7ff fb84 	bl	8001400 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e0cb      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0a:	4b49      	ldr	r3, [pc, #292]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0ee      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x334>
 8001d16:	e014      	b.n	8001d42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7ff fb72 	bl	8001400 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d20:	f7ff fb6e 	bl	8001400 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e0b5      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d36:	4b3e      	ldr	r3, [pc, #248]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ee      	bne.n	8001d20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d42:	7dfb      	ldrb	r3, [r7, #23]
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d105      	bne.n	8001d54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d48:	4b39      	ldr	r3, [pc, #228]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4c:	4a38      	ldr	r2, [pc, #224]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 80a1 	beq.w	8001ea0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d5e:	4b34      	ldr	r3, [pc, #208]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d05c      	beq.n	8001e24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d141      	bne.n	8001df6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d72:	4b31      	ldr	r3, [pc, #196]	@ (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff fb42 	bl	8001400 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d80:	f7ff fb3e 	bl	8001400 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e087      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	4b27      	ldr	r3, [pc, #156]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dac:	019b      	lsls	r3, r3, #6
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001db4:	085b      	lsrs	r3, r3, #1
 8001db6:	3b01      	subs	r3, #1
 8001db8:	041b      	lsls	r3, r3, #16
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dc0:	061b      	lsls	r3, r3, #24
 8001dc2:	491b      	ldr	r1, [pc, #108]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fb17 	bl	8001400 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd6:	f7ff fb13 	bl	8001400 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e05c      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	4b11      	ldr	r3, [pc, #68]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0f0      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x416>
 8001df4:	e054      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_RCC_OscConfig+0x478>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fb00 	bl	8001400 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e04:	f7ff fafc 	bl	8001400 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e045      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_RCC_OscConfig+0x470>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d1f0      	bne.n	8001e04 <HAL_RCC_OscConfig+0x444>
 8001e22:	e03d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e038      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40007000 	.word	0x40007000
 8001e38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eac <HAL_RCC_OscConfig+0x4ec>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d028      	beq.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d121      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d11a      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e66:	68fa      	ldr	r2, [r7, #12]
 8001e68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d111      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	085b      	lsrs	r3, r3, #1
 8001e84:	3b01      	subs	r3, #1
 8001e86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800

08001eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0cc      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b68      	ldr	r3, [pc, #416]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d90c      	bls.n	8001eec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b65      	ldr	r3, [pc, #404]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001ed4:	683a      	ldr	r2, [r7, #0]
 8001ed6:	b2d2      	uxtb	r2, r2
 8001ed8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a58      	ldr	r2, [pc, #352]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a52      	ldr	r2, [pc, #328]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d044      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d119      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e06f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e067      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b37      	ldr	r3, [pc, #220]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4934      	ldr	r1, [pc, #208]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fa2e 	bl	8001400 <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff fa2a 	bl	8001400 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e04f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d20c      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002022:	4b12      	ldr	r3, [pc, #72]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	@ (800206c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	@ (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff f98e 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00
 800206c:	40023800 	.word	0x40023800
 8002070:	08005664 	.word	0x08005664
 8002074:	20000008 	.word	0x20000008
 8002078:	2000000c 	.word	0x2000000c

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002080:	b090      	sub	sp, #64	@ 0x40
 8002082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800208c:	2300      	movs	r3, #0
 800208e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002094:	4b59      	ldr	r3, [pc, #356]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d00d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	f200 80a1 	bhi.w	80021e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ae:	e09b      	b.n	80021e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b53      	ldr	r3, [pc, #332]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x184>)
 80020b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020b4:	e09b      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b6:	4b53      	ldr	r3, [pc, #332]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80020ba:	e098      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020bc:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80020c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020c6:	4b4d      	ldr	r3, [pc, #308]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d028      	beq.n	8002124 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b4a      	ldr	r3, [pc, #296]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	2200      	movs	r2, #0
 80020da:	623b      	str	r3, [r7, #32]
 80020dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020e4:	2100      	movs	r1, #0
 80020e6:	4b47      	ldr	r3, [pc, #284]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020e8:	fb03 f201 	mul.w	r2, r3, r1
 80020ec:	2300      	movs	r3, #0
 80020ee:	fb00 f303 	mul.w	r3, r0, r3
 80020f2:	4413      	add	r3, r2
 80020f4:	4a43      	ldr	r2, [pc, #268]	@ (8002204 <HAL_RCC_GetSysClockFreq+0x188>)
 80020f6:	fba0 1202 	umull	r1, r2, r0, r2
 80020fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020fc:	460a      	mov	r2, r1
 80020fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002102:	4413      	add	r3, r2
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002108:	2200      	movs	r2, #0
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	61fa      	str	r2, [r7, #28]
 800210e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002112:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002116:	f7fe f8b3 	bl	8000280 <__aeabi_uldivmod>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4613      	mov	r3, r2
 8002120:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002122:	e053      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002124:	4b35      	ldr	r3, [pc, #212]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	2200      	movs	r2, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	617a      	str	r2, [r7, #20]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002136:	f04f 0b00 	mov.w	fp, #0
 800213a:	4652      	mov	r2, sl
 800213c:	465b      	mov	r3, fp
 800213e:	f04f 0000 	mov.w	r0, #0
 8002142:	f04f 0100 	mov.w	r1, #0
 8002146:	0159      	lsls	r1, r3, #5
 8002148:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800214c:	0150      	lsls	r0, r2, #5
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	ebb2 080a 	subs.w	r8, r2, sl
 8002156:	eb63 090b 	sbc.w	r9, r3, fp
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002166:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800216a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800216e:	ebb2 0408 	subs.w	r4, r2, r8
 8002172:	eb63 0509 	sbc.w	r5, r3, r9
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	00eb      	lsls	r3, r5, #3
 8002180:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002184:	00e2      	lsls	r2, r4, #3
 8002186:	4614      	mov	r4, r2
 8002188:	461d      	mov	r5, r3
 800218a:	eb14 030a 	adds.w	r3, r4, sl
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	eb45 030b 	adc.w	r3, r5, fp
 8002194:	607b      	str	r3, [r7, #4]
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021a2:	4629      	mov	r1, r5
 80021a4:	028b      	lsls	r3, r1, #10
 80021a6:	4621      	mov	r1, r4
 80021a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021ac:	4621      	mov	r1, r4
 80021ae:	028a      	lsls	r2, r1, #10
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b6:	2200      	movs	r2, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	60fa      	str	r2, [r7, #12]
 80021bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c0:	f7fe f85e 	bl	8000280 <__aeabi_uldivmod>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4613      	mov	r3, r2
 80021ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <HAL_RCC_GetSysClockFreq+0x180>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	0c1b      	lsrs	r3, r3, #16
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	3301      	adds	r3, #1
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80021dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80021de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021e6:	e002      	b.n	80021ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3740      	adds	r7, #64	@ 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800
 8002200:	00f42400 	.word	0x00f42400
 8002204:	017d7840 	.word	0x017d7840

08002208 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002214:	2300      	movs	r3, #0
 8002216:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800222c:	2b00      	cmp	r3, #0
 800222e:	d035      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002230:	4b62      	ldr	r3, [pc, #392]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002236:	f7ff f8e3 	bl	8001400 <HAL_GetTick>
 800223a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800223c:	e008      	b.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800223e:	f7ff f8df 	bl	8001400 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e0b0      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002250:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1f0      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	019a      	lsls	r2, r3, #6
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	071b      	lsls	r3, r3, #28
 8002268:	4955      	ldr	r1, [pc, #340]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002270:	4b52      	ldr	r3, [pc, #328]	@ (80023bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002276:	f7ff f8c3 	bl	8001400 <HAL_GetTick>
 800227a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800227e:	f7ff f8bf 	bl	8001400 <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e090      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002290:	4b4b      	ldr	r3, [pc, #300]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8083 	beq.w	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4b44      	ldr	r3, [pc, #272]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b2:	4a43      	ldr	r2, [pc, #268]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022ba:	4b41      	ldr	r3, [pc, #260]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	60fb      	str	r3, [r7, #12]
 80022c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80022c6:	4b3f      	ldr	r3, [pc, #252]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3e      	ldr	r2, [pc, #248]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022d2:	f7ff f895 	bl	8001400 <HAL_GetTick>
 80022d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022da:	f7ff f891 	bl	8001400 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e062      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80022ec:	4b35      	ldr	r3, [pc, #212]	@ (80023c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f0      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022f8:	4b31      	ldr	r3, [pc, #196]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002300:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d02f      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d028      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002316:	4b2a      	ldr	r3, [pc, #168]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800231e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002320:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002326:	4b28      	ldr	r3, [pc, #160]	@ (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800232c:	4a24      	ldr	r2, [pc, #144]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002332:	4b23      	ldr	r3, [pc, #140]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	2b01      	cmp	r3, #1
 800233c:	d114      	bne.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800233e:	f7ff f85f 	bl	8001400 <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff f85b 	bl	8001400 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e02a      	b.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b18      	ldr	r3, [pc, #96]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002370:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002374:	d10d      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002376:	4b12      	ldr	r3, [pc, #72]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68db      	ldr	r3, [r3, #12]
 8002382:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800238a:	490d      	ldr	r1, [pc, #52]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
 8002390:	e005      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002392:	4b0b      	ldr	r3, [pc, #44]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002398:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800239c:	6093      	str	r3, [r2, #8]
 800239e:	4b08      	ldr	r3, [pc, #32]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023aa:	4905      	ldr	r1, [pc, #20]	@ (80023c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	42470068 	.word	0x42470068
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40007000 	.word	0x40007000
 80023c8:	42470e40 	.word	0x42470e40

080023cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e073      	b.n	80024c6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7f5b      	ldrb	r3, [r3, #29]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d105      	bne.n	80023f4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe fe0e 	bl	8001010 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2202      	movs	r2, #2
 80023f8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b10      	cmp	r3, #16
 8002406:	d055      	beq.n	80024b4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22ca      	movs	r2, #202	@ 0xca
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2253      	movs	r2, #83	@ 0x53
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 fa49 	bl	80028b0 <RTC_EnterInitMode>
 800241e:	4603      	mov	r3, r0
 8002420:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002422:	7bfb      	ldrb	r3, [r7, #15]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d12c      	bne.n	8002482 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002436:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800243a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6899      	ldr	r1, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68d2      	ldr	r2, [r2, #12]
 8002462:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6919      	ldr	r1, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	041a      	lsls	r2, r3, #16
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fa50 	bl	800291e <RTC_ExitInitMode>
 800247e:	4603      	mov	r3, r0
 8002480:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002482:	7bfb      	ldrb	r3, [r7, #15]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d110      	bne.n	80024aa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002496:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699a      	ldr	r2, [r3, #24]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	22ff      	movs	r2, #255	@ 0xff
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80024b2:	e001      	b.n	80024b8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d102      	bne.n	80024c4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024ce:	b590      	push	{r4, r7, lr}
 80024d0:	b087      	sub	sp, #28
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	60f8      	str	r0, [r7, #12]
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	7f1b      	ldrb	r3, [r3, #28]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d101      	bne.n	80024ea <HAL_RTC_SetTime+0x1c>
 80024e6:	2302      	movs	r3, #2
 80024e8:	e087      	b.n	80025fa <HAL_RTC_SetTime+0x12c>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2202      	movs	r2, #2
 80024f4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d126      	bne.n	800254a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2200      	movs	r2, #0
 800250e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fa27 	bl	8002968 <RTC_ByteToBcd2>
 800251a:	4603      	mov	r3, r0
 800251c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	785b      	ldrb	r3, [r3, #1]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fa20 	bl	8002968 <RTC_ByteToBcd2>
 8002528:	4603      	mov	r3, r0
 800252a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800252c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	789b      	ldrb	r3, [r3, #2]
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fa18 	bl	8002968 <RTC_ByteToBcd2>
 8002538:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800253a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	78db      	ldrb	r3, [r3, #3]
 8002542:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]
 8002548:	e018      	b.n	800257c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002554:	2b00      	cmp	r3, #0
 8002556:	d102      	bne.n	800255e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	785b      	ldrb	r3, [r3, #1]
 8002568:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800256a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800256c:	68ba      	ldr	r2, [r7, #8]
 800256e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002570:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	78db      	ldrb	r3, [r3, #3]
 8002576:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002578:	4313      	orrs	r3, r2
 800257a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	22ca      	movs	r2, #202	@ 0xca
 8002582:	625a      	str	r2, [r3, #36]	@ 0x24
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2253      	movs	r2, #83	@ 0x53
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f000 f98f 	bl	80028b0 <RTC_EnterInitMode>
 8002592:	4603      	mov	r3, r0
 8002594:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d120      	bne.n	80025de <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80025a6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80025aa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6899      	ldr	r1, [r3, #8]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	68da      	ldr	r2, [r3, #12]
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	430a      	orrs	r2, r1
 80025d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f000 f9a2 	bl	800291e <RTC_ExitInitMode>
 80025da:	4603      	mov	r3, r0
 80025dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d102      	bne.n	80025ea <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2201      	movs	r2, #1
 80025e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	22ff      	movs	r2, #255	@ 0xff
 80025f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	771a      	strb	r2, [r3, #28]

  return status;
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	371c      	adds	r7, #28
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}

08002602 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002634:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002638:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	0a1b      	lsrs	r3, r3, #8
 800264e:	b2db      	uxtb	r3, r3
 8002650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	0d9b      	lsrs	r3, r3, #22
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d11a      	bne.n	80026b4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f98e 	bl	80029a4 <RTC_Bcd2ToByte>
 8002688:	4603      	mov	r3, r0
 800268a:	461a      	mov	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	4618      	mov	r0, r3
 8002696:	f000 f985 	bl	80029a4 <RTC_Bcd2ToByte>
 800269a:	4603      	mov	r3, r0
 800269c:	461a      	mov	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	789b      	ldrb	r3, [r3, #2]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f000 f97c 	bl	80029a4 <RTC_Bcd2ToByte>
 80026ac:	4603      	mov	r3, r0
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3718      	adds	r7, #24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026be:	b590      	push	{r4, r7, lr}
 80026c0:	b087      	sub	sp, #28
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	7f1b      	ldrb	r3, [r3, #28]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_RTC_SetDate+0x1c>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e071      	b.n	80027be <HAL_RTC_SetDate+0x100>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2202      	movs	r2, #2
 80026e4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10e      	bne.n	800270a <HAL_RTC_SetDate+0x4c>
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	785b      	ldrb	r3, [r3, #1]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d008      	beq.n	800270a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	785b      	ldrb	r3, [r3, #1]
 80026fc:	f023 0310 	bic.w	r3, r3, #16
 8002700:	b2db      	uxtb	r3, r3
 8002702:	330a      	adds	r3, #10
 8002704:	b2da      	uxtb	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d11c      	bne.n	800274a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	78db      	ldrb	r3, [r3, #3]
 8002714:	4618      	mov	r0, r3
 8002716:	f000 f927 	bl	8002968 <RTC_ByteToBcd2>
 800271a:	4603      	mov	r3, r0
 800271c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 f920 	bl	8002968 <RTC_ByteToBcd2>
 8002728:	4603      	mov	r3, r0
 800272a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800272c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	789b      	ldrb	r3, [r3, #2]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f918 	bl	8002968 <RTC_ByteToBcd2>
 8002738:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800273a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002744:	4313      	orrs	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	e00e      	b.n	8002768 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	785b      	ldrb	r3, [r3, #1]
 8002754:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002756:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8002758:	68ba      	ldr	r2, [r7, #8]
 800275a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800275c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	22ca      	movs	r2, #202	@ 0xca
 800276e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2253      	movs	r2, #83	@ 0x53
 8002776:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f899 	bl	80028b0 <RTC_EnterInitMode>
 800277e:	4603      	mov	r3, r0
 8002780:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10c      	bne.n	80027a2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002792:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002796:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f8c0 	bl	800291e <RTC_ExitInitMode>
 800279e:	4603      	mov	r3, r0
 80027a0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80027a2:	7cfb      	ldrb	r3, [r7, #19]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d102      	bne.n	80027ae <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2201      	movs	r2, #1
 80027ac:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	22ff      	movs	r2, #255	@ 0xff
 80027b4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	771a      	strb	r2, [r3, #28]

  return status;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}

080027c6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	60b9      	str	r1, [r7, #8]
 80027d0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80027e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80027e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	f003 031f 	and.w	r3, r3, #31
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	0b5b      	lsrs	r3, r3, #13
 8002812:	b2db      	uxtb	r3, r3
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	b2da      	uxtb	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d11a      	bne.n	800285a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	78db      	ldrb	r3, [r3, #3]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 f8bb 	bl	80029a4 <RTC_Bcd2ToByte>
 800282e:	4603      	mov	r3, r0
 8002830:	461a      	mov	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f8b2 	bl	80029a4 <RTC_Bcd2ToByte>
 8002840:	4603      	mov	r3, r0
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	789b      	ldrb	r3, [r3, #2]
 800284c:	4618      	mov	r0, r3
 800284e:	f000 f8a9 	bl	80029a4 <RTC_Bcd2ToByte>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0d      	ldr	r2, [pc, #52]	@ (80028ac <HAL_RTC_WaitForSynchro+0x48>)
 8002876:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002878:	f7fe fdc2 	bl	8001400 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800287e:	e009      	b.n	8002894 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002880:	f7fe fdbe 	bl	8001400 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800288e:	d901      	bls.n	8002894 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e007      	b.n	80028a4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0320 	and.w	r3, r3, #32
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	00017f5f 	.word	0x00017f5f

080028b0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d122      	bne.n	8002914 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80028dc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028de:	f7fe fd8f 	bl	8001400 <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80028e4:	e00c      	b.n	8002900 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028e6:	f7fe fd8b 	bl	8001400 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028f4:	d904      	bls.n	8002900 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <RTC_EnterInitMode+0x64>
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d1e8      	bne.n	80028e6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002914:	7bfb      	ldrb	r3, [r7, #15]
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68da      	ldr	r2, [r3, #12]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002938:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 0320 	and.w	r3, r3, #32
 8002944:	2b00      	cmp	r3, #0
 8002946:	d10a      	bne.n	800295e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff8b 	bl	8002864 <HAL_RTC_WaitForSynchro>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d004      	beq.n	800295e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2204      	movs	r2, #4
 8002958:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800295e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002960:	4618      	mov	r0, r3
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002972:	2300      	movs	r3, #0
 8002974:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002976:	e005      	b.n	8002984 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	3301      	adds	r3, #1
 800297c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	3b0a      	subs	r3, #10
 8002982:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002984:	79fb      	ldrb	r3, [r7, #7]
 8002986:	2b09      	cmp	r3, #9
 8002988:	d8f6      	bhi.n	8002978 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	b2db      	uxtb	r3, r3
 800298e:	011b      	lsls	r3, r3, #4
 8002990:	b2da      	uxtb	r2, r3
 8002992:	79fb      	ldrb	r3, [r7, #7]
 8002994:	4313      	orrs	r3, r2
 8002996:	b2db      	uxtb	r3, r3
}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	4603      	mov	r3, r0
 80029ac:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3350      	adds	r3, #80	@ 0x50
 80029f6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	601a      	str	r2, [r3, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	371c      	adds	r7, #28
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) &(hrtc->Instance->BKP0R);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	3350      	adds	r3, #80	@ 0x50
 8002a28:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e07b      	b.n	8002b4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d108      	bne.n	8002a70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a66:	d009      	beq.n	8002a7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61da      	str	r2, [r3, #28]
 8002a6e:	e005      	b.n	8002a7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2200      	movs	r2, #0
 8002a74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fb1a 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ab2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b00:	ea42 0103 	orr.w	r1, r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	f003 0104 	and.w	r1, r3, #4
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	f003 0210 	and.w	r2, r3, #16
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	69da      	ldr	r2, [r3, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	603b      	str	r3, [r7, #0]
 8002b62:	4613      	mov	r3, r2
 8002b64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b66:	f7fe fc4b 	bl	8001400 <HAL_GetTick>
 8002b6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002b6c:	88fb      	ldrh	r3, [r7, #6]
 8002b6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d001      	beq.n	8002b80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e12a      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d002      	beq.n	8002b8c <HAL_SPI_Transmit+0x36>
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e122      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_SPI_Transmit+0x48>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e11b      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2203      	movs	r2, #3
 8002baa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	88fa      	ldrh	r2, [r7, #6]
 8002bbe:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bec:	d10f      	bne.n	8002c0e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b40      	cmp	r3, #64	@ 0x40
 8002c1a:	d007      	beq.n	8002c2c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c34:	d152      	bne.n	8002cdc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_SPI_Transmit+0xee>
 8002c3e:	8b7b      	ldrh	r3, [r7, #26]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d145      	bne.n	8002cd0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	881a      	ldrh	r2, [r3, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	1c9a      	adds	r2, r3, #2
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	3b01      	subs	r3, #1
 8002c62:	b29a      	uxth	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c68:	e032      	b.n	8002cd0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d112      	bne.n	8002c9e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	881a      	ldrh	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	1c9a      	adds	r2, r3, #2
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002c9c:	e018      	b.n	8002cd0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9e:	f7fe fbaf 	bl	8001400 <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d803      	bhi.n	8002cb6 <HAL_SPI_Transmit+0x160>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d102      	bne.n	8002cbc <HAL_SPI_Transmit+0x166>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d109      	bne.n	8002cd0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e082      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1c7      	bne.n	8002c6a <HAL_SPI_Transmit+0x114>
 8002cda:	e053      	b.n	8002d84 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <HAL_SPI_Transmit+0x194>
 8002ce4:	8b7b      	ldrh	r3, [r7, #26]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d147      	bne.n	8002d7a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	7812      	ldrb	r2, [r2, #0]
 8002cf6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d10:	e033      	b.n	8002d7a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d113      	bne.n	8002d48 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002d46:	e018      	b.n	8002d7a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d48:	f7fe fb5a 	bl	8001400 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d803      	bhi.n	8002d60 <HAL_SPI_Transmit+0x20a>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d102      	bne.n	8002d66 <HAL_SPI_Transmit+0x210>
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e02d      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1c6      	bne.n	8002d12 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d84:	69fa      	ldr	r2, [r7, #28]
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f8b1 	bl	8002ef0 <SPI_EndRxTxTransaction>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10a      	bne.n	8002db8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002da2:	2300      	movs	r3, #0
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	617b      	str	r3, [r7, #20]
 8002db6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d001      	beq.n	8002dd4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
  }
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
	...

08002de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002df0:	f7fe fb06 	bl	8001400 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e00:	f7fe fafe 	bl	8001400 <HAL_GetTick>
 8002e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e06:	4b39      	ldr	r3, [pc, #228]	@ (8002eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	0d1b      	lsrs	r3, r3, #20
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	fb02 f303 	mul.w	r3, r2, r3
 8002e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	e055      	b.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1e:	d051      	beq.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e20:	f7fe faee 	bl	8001400 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	69fa      	ldr	r2, [r7, #28]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d902      	bls.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d13d      	bne.n	8002eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e4e:	d111      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e58:	d004      	beq.n	8002e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e62:	d107      	bne.n	8002e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e7c:	d10f      	bne.n	8002e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e018      	b.n	8002ee4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	61fb      	str	r3, [r7, #28]
 8002ebc:	e002      	b.n	8002ec4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689a      	ldr	r2, [r3, #8]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d19a      	bne.n	8002e18 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3720      	adds	r7, #32
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000008 	.word	0x20000008

08002ef0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2201      	movs	r2, #1
 8002f04:	2102      	movs	r1, #2
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ff6a 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e032      	b.n	8002f88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f22:	4b1b      	ldr	r3, [pc, #108]	@ (8002f90 <SPI_EndRxTxTransaction+0xa0>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a1b      	ldr	r2, [pc, #108]	@ (8002f94 <SPI_EndRxTxTransaction+0xa4>)
 8002f28:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2c:	0d5b      	lsrs	r3, r3, #21
 8002f2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002f40:	d112      	bne.n	8002f68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f7ff ff47 	bl	8002de0 <SPI_WaitFlagStateUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e00f      	b.n	8002f88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f7e:	2b80      	cmp	r3, #128	@ 0x80
 8002f80:	d0f2      	beq.n	8002f68 <SPI_EndRxTxTransaction+0x78>
 8002f82:	e000      	b.n	8002f86 <SPI_EndRxTxTransaction+0x96>
        break;
 8002f84:	bf00      	nop
  }

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3718      	adds	r7, #24
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000008 	.word	0x20000008
 8002f94:	165e9f81 	.word	0x165e9f81

08002f98 <sniprintf>:
 8002f98:	b40c      	push	{r2, r3}
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <sniprintf+0x68>)
 8002f9e:	1e0c      	subs	r4, r1, #0
 8002fa0:	681d      	ldr	r5, [r3, #0]
 8002fa2:	b09d      	sub	sp, #116	@ 0x74
 8002fa4:	da08      	bge.n	8002fb8 <sniprintf+0x20>
 8002fa6:	238b      	movs	r3, #139	@ 0x8b
 8002fa8:	602b      	str	r3, [r5, #0]
 8002faa:	f04f 30ff 	mov.w	r0, #4294967295
 8002fae:	b01d      	add	sp, #116	@ 0x74
 8002fb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002fb4:	b002      	add	sp, #8
 8002fb6:	4770      	bx	lr
 8002fb8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002fbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8002fc6:	bf14      	ite	ne
 8002fc8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002fcc:	4623      	moveq	r3, r4
 8002fce:	9304      	str	r3, [sp, #16]
 8002fd0:	9307      	str	r3, [sp, #28]
 8002fd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002fd6:	9002      	str	r0, [sp, #8]
 8002fd8:	9006      	str	r0, [sp, #24]
 8002fda:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002fde:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002fe0:	ab21      	add	r3, sp, #132	@ 0x84
 8002fe2:	a902      	add	r1, sp, #8
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	9301      	str	r3, [sp, #4]
 8002fe8:	f000 f9d8 	bl	800339c <_svfiprintf_r>
 8002fec:	1c43      	adds	r3, r0, #1
 8002fee:	bfbc      	itt	lt
 8002ff0:	238b      	movlt	r3, #139	@ 0x8b
 8002ff2:	602b      	strlt	r3, [r5, #0]
 8002ff4:	2c00      	cmp	r4, #0
 8002ff6:	d0da      	beq.n	8002fae <sniprintf+0x16>
 8002ff8:	9b02      	ldr	r3, [sp, #8]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
 8002ffe:	e7d6      	b.n	8002fae <sniprintf+0x16>
 8003000:	20000014 	.word	0x20000014

08003004 <siscanf>:
 8003004:	b40e      	push	{r1, r2, r3}
 8003006:	b570      	push	{r4, r5, r6, lr}
 8003008:	b09d      	sub	sp, #116	@ 0x74
 800300a:	ac21      	add	r4, sp, #132	@ 0x84
 800300c:	2500      	movs	r5, #0
 800300e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8003012:	f854 6b04 	ldr.w	r6, [r4], #4
 8003016:	f8ad 2014 	strh.w	r2, [sp, #20]
 800301a:	951b      	str	r5, [sp, #108]	@ 0x6c
 800301c:	9002      	str	r0, [sp, #8]
 800301e:	9006      	str	r0, [sp, #24]
 8003020:	f7fd f8d6 	bl	80001d0 <strlen>
 8003024:	4b0b      	ldr	r3, [pc, #44]	@ (8003054 <siscanf+0x50>)
 8003026:	9003      	str	r0, [sp, #12]
 8003028:	9007      	str	r0, [sp, #28]
 800302a:	480b      	ldr	r0, [pc, #44]	@ (8003058 <siscanf+0x54>)
 800302c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800302e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003032:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003036:	4632      	mov	r2, r6
 8003038:	4623      	mov	r3, r4
 800303a:	a902      	add	r1, sp, #8
 800303c:	6800      	ldr	r0, [r0, #0]
 800303e:	950f      	str	r5, [sp, #60]	@ 0x3c
 8003040:	9514      	str	r5, [sp, #80]	@ 0x50
 8003042:	9401      	str	r4, [sp, #4]
 8003044:	f000 fb00 	bl	8003648 <__ssvfiscanf_r>
 8003048:	b01d      	add	sp, #116	@ 0x74
 800304a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800304e:	b003      	add	sp, #12
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	0800305d 	.word	0x0800305d
 8003058:	20000014 	.word	0x20000014

0800305c <__seofread>:
 800305c:	2000      	movs	r0, #0
 800305e:	4770      	bx	lr

08003060 <memset>:
 8003060:	4402      	add	r2, r0
 8003062:	4603      	mov	r3, r0
 8003064:	4293      	cmp	r3, r2
 8003066:	d100      	bne.n	800306a <memset+0xa>
 8003068:	4770      	bx	lr
 800306a:	f803 1b01 	strb.w	r1, [r3], #1
 800306e:	e7f9      	b.n	8003064 <memset+0x4>

08003070 <strstr>:
 8003070:	780a      	ldrb	r2, [r1, #0]
 8003072:	b570      	push	{r4, r5, r6, lr}
 8003074:	b96a      	cbnz	r2, 8003092 <strstr+0x22>
 8003076:	bd70      	pop	{r4, r5, r6, pc}
 8003078:	429a      	cmp	r2, r3
 800307a:	d109      	bne.n	8003090 <strstr+0x20>
 800307c:	460c      	mov	r4, r1
 800307e:	4605      	mov	r5, r0
 8003080:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f6      	beq.n	8003076 <strstr+0x6>
 8003088:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800308c:	429e      	cmp	r6, r3
 800308e:	d0f7      	beq.n	8003080 <strstr+0x10>
 8003090:	3001      	adds	r0, #1
 8003092:	7803      	ldrb	r3, [r0, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <strstr+0x8>
 8003098:	4618      	mov	r0, r3
 800309a:	e7ec      	b.n	8003076 <strstr+0x6>

0800309c <__errno>:
 800309c:	4b01      	ldr	r3, [pc, #4]	@ (80030a4 <__errno+0x8>)
 800309e:	6818      	ldr	r0, [r3, #0]
 80030a0:	4770      	bx	lr
 80030a2:	bf00      	nop
 80030a4:	20000014 	.word	0x20000014

080030a8 <__libc_init_array>:
 80030a8:	b570      	push	{r4, r5, r6, lr}
 80030aa:	4d0d      	ldr	r5, [pc, #52]	@ (80030e0 <__libc_init_array+0x38>)
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <__libc_init_array+0x3c>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	2600      	movs	r6, #0
 80030b4:	42a6      	cmp	r6, r4
 80030b6:	d109      	bne.n	80030cc <__libc_init_array+0x24>
 80030b8:	4d0b      	ldr	r5, [pc, #44]	@ (80030e8 <__libc_init_array+0x40>)
 80030ba:	4c0c      	ldr	r4, [pc, #48]	@ (80030ec <__libc_init_array+0x44>)
 80030bc:	f001 f8e2 	bl	8004284 <_init>
 80030c0:	1b64      	subs	r4, r4, r5
 80030c2:	10a4      	asrs	r4, r4, #2
 80030c4:	2600      	movs	r6, #0
 80030c6:	42a6      	cmp	r6, r4
 80030c8:	d105      	bne.n	80030d6 <__libc_init_array+0x2e>
 80030ca:	bd70      	pop	{r4, r5, r6, pc}
 80030cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80030d0:	4798      	blx	r3
 80030d2:	3601      	adds	r6, #1
 80030d4:	e7ee      	b.n	80030b4 <__libc_init_array+0xc>
 80030d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030da:	4798      	blx	r3
 80030dc:	3601      	adds	r6, #1
 80030de:	e7f2      	b.n	80030c6 <__libc_init_array+0x1e>
 80030e0:	0800d7cc 	.word	0x0800d7cc
 80030e4:	0800d7cc 	.word	0x0800d7cc
 80030e8:	0800d7cc 	.word	0x0800d7cc
 80030ec:	0800d7d0 	.word	0x0800d7d0

080030f0 <__retarget_lock_acquire_recursive>:
 80030f0:	4770      	bx	lr

080030f2 <__retarget_lock_release_recursive>:
 80030f2:	4770      	bx	lr

080030f4 <_free_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	4605      	mov	r5, r0
 80030f8:	2900      	cmp	r1, #0
 80030fa:	d041      	beq.n	8003180 <_free_r+0x8c>
 80030fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003100:	1f0c      	subs	r4, r1, #4
 8003102:	2b00      	cmp	r3, #0
 8003104:	bfb8      	it	lt
 8003106:	18e4      	addlt	r4, r4, r3
 8003108:	f000 f8e0 	bl	80032cc <__malloc_lock>
 800310c:	4a1d      	ldr	r2, [pc, #116]	@ (8003184 <_free_r+0x90>)
 800310e:	6813      	ldr	r3, [r2, #0]
 8003110:	b933      	cbnz	r3, 8003120 <_free_r+0x2c>
 8003112:	6063      	str	r3, [r4, #4]
 8003114:	6014      	str	r4, [r2, #0]
 8003116:	4628      	mov	r0, r5
 8003118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800311c:	f000 b8dc 	b.w	80032d8 <__malloc_unlock>
 8003120:	42a3      	cmp	r3, r4
 8003122:	d908      	bls.n	8003136 <_free_r+0x42>
 8003124:	6820      	ldr	r0, [r4, #0]
 8003126:	1821      	adds	r1, r4, r0
 8003128:	428b      	cmp	r3, r1
 800312a:	bf01      	itttt	eq
 800312c:	6819      	ldreq	r1, [r3, #0]
 800312e:	685b      	ldreq	r3, [r3, #4]
 8003130:	1809      	addeq	r1, r1, r0
 8003132:	6021      	streq	r1, [r4, #0]
 8003134:	e7ed      	b.n	8003112 <_free_r+0x1e>
 8003136:	461a      	mov	r2, r3
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	b10b      	cbz	r3, 8003140 <_free_r+0x4c>
 800313c:	42a3      	cmp	r3, r4
 800313e:	d9fa      	bls.n	8003136 <_free_r+0x42>
 8003140:	6811      	ldr	r1, [r2, #0]
 8003142:	1850      	adds	r0, r2, r1
 8003144:	42a0      	cmp	r0, r4
 8003146:	d10b      	bne.n	8003160 <_free_r+0x6c>
 8003148:	6820      	ldr	r0, [r4, #0]
 800314a:	4401      	add	r1, r0
 800314c:	1850      	adds	r0, r2, r1
 800314e:	4283      	cmp	r3, r0
 8003150:	6011      	str	r1, [r2, #0]
 8003152:	d1e0      	bne.n	8003116 <_free_r+0x22>
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	6053      	str	r3, [r2, #4]
 800315a:	4408      	add	r0, r1
 800315c:	6010      	str	r0, [r2, #0]
 800315e:	e7da      	b.n	8003116 <_free_r+0x22>
 8003160:	d902      	bls.n	8003168 <_free_r+0x74>
 8003162:	230c      	movs	r3, #12
 8003164:	602b      	str	r3, [r5, #0]
 8003166:	e7d6      	b.n	8003116 <_free_r+0x22>
 8003168:	6820      	ldr	r0, [r4, #0]
 800316a:	1821      	adds	r1, r4, r0
 800316c:	428b      	cmp	r3, r1
 800316e:	bf04      	itt	eq
 8003170:	6819      	ldreq	r1, [r3, #0]
 8003172:	685b      	ldreq	r3, [r3, #4]
 8003174:	6063      	str	r3, [r4, #4]
 8003176:	bf04      	itt	eq
 8003178:	1809      	addeq	r1, r1, r0
 800317a:	6021      	streq	r1, [r4, #0]
 800317c:	6054      	str	r4, [r2, #4]
 800317e:	e7ca      	b.n	8003116 <_free_r+0x22>
 8003180:	bd38      	pop	{r3, r4, r5, pc}
 8003182:	bf00      	nop
 8003184:	20000244 	.word	0x20000244

08003188 <sbrk_aligned>:
 8003188:	b570      	push	{r4, r5, r6, lr}
 800318a:	4e0f      	ldr	r6, [pc, #60]	@ (80031c8 <sbrk_aligned+0x40>)
 800318c:	460c      	mov	r4, r1
 800318e:	6831      	ldr	r1, [r6, #0]
 8003190:	4605      	mov	r5, r0
 8003192:	b911      	cbnz	r1, 800319a <sbrk_aligned+0x12>
 8003194:	f000 ff36 	bl	8004004 <_sbrk_r>
 8003198:	6030      	str	r0, [r6, #0]
 800319a:	4621      	mov	r1, r4
 800319c:	4628      	mov	r0, r5
 800319e:	f000 ff31 	bl	8004004 <_sbrk_r>
 80031a2:	1c43      	adds	r3, r0, #1
 80031a4:	d103      	bne.n	80031ae <sbrk_aligned+0x26>
 80031a6:	f04f 34ff 	mov.w	r4, #4294967295
 80031aa:	4620      	mov	r0, r4
 80031ac:	bd70      	pop	{r4, r5, r6, pc}
 80031ae:	1cc4      	adds	r4, r0, #3
 80031b0:	f024 0403 	bic.w	r4, r4, #3
 80031b4:	42a0      	cmp	r0, r4
 80031b6:	d0f8      	beq.n	80031aa <sbrk_aligned+0x22>
 80031b8:	1a21      	subs	r1, r4, r0
 80031ba:	4628      	mov	r0, r5
 80031bc:	f000 ff22 	bl	8004004 <_sbrk_r>
 80031c0:	3001      	adds	r0, #1
 80031c2:	d1f2      	bne.n	80031aa <sbrk_aligned+0x22>
 80031c4:	e7ef      	b.n	80031a6 <sbrk_aligned+0x1e>
 80031c6:	bf00      	nop
 80031c8:	20000240 	.word	0x20000240

080031cc <_malloc_r>:
 80031cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031d0:	1ccd      	adds	r5, r1, #3
 80031d2:	f025 0503 	bic.w	r5, r5, #3
 80031d6:	3508      	adds	r5, #8
 80031d8:	2d0c      	cmp	r5, #12
 80031da:	bf38      	it	cc
 80031dc:	250c      	movcc	r5, #12
 80031de:	2d00      	cmp	r5, #0
 80031e0:	4606      	mov	r6, r0
 80031e2:	db01      	blt.n	80031e8 <_malloc_r+0x1c>
 80031e4:	42a9      	cmp	r1, r5
 80031e6:	d904      	bls.n	80031f2 <_malloc_r+0x26>
 80031e8:	230c      	movs	r3, #12
 80031ea:	6033      	str	r3, [r6, #0]
 80031ec:	2000      	movs	r0, #0
 80031ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032c8 <_malloc_r+0xfc>
 80031f6:	f000 f869 	bl	80032cc <__malloc_lock>
 80031fa:	f8d8 3000 	ldr.w	r3, [r8]
 80031fe:	461c      	mov	r4, r3
 8003200:	bb44      	cbnz	r4, 8003254 <_malloc_r+0x88>
 8003202:	4629      	mov	r1, r5
 8003204:	4630      	mov	r0, r6
 8003206:	f7ff ffbf 	bl	8003188 <sbrk_aligned>
 800320a:	1c43      	adds	r3, r0, #1
 800320c:	4604      	mov	r4, r0
 800320e:	d158      	bne.n	80032c2 <_malloc_r+0xf6>
 8003210:	f8d8 4000 	ldr.w	r4, [r8]
 8003214:	4627      	mov	r7, r4
 8003216:	2f00      	cmp	r7, #0
 8003218:	d143      	bne.n	80032a2 <_malloc_r+0xd6>
 800321a:	2c00      	cmp	r4, #0
 800321c:	d04b      	beq.n	80032b6 <_malloc_r+0xea>
 800321e:	6823      	ldr	r3, [r4, #0]
 8003220:	4639      	mov	r1, r7
 8003222:	4630      	mov	r0, r6
 8003224:	eb04 0903 	add.w	r9, r4, r3
 8003228:	f000 feec 	bl	8004004 <_sbrk_r>
 800322c:	4581      	cmp	r9, r0
 800322e:	d142      	bne.n	80032b6 <_malloc_r+0xea>
 8003230:	6821      	ldr	r1, [r4, #0]
 8003232:	1a6d      	subs	r5, r5, r1
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	f7ff ffa6 	bl	8003188 <sbrk_aligned>
 800323c:	3001      	adds	r0, #1
 800323e:	d03a      	beq.n	80032b6 <_malloc_r+0xea>
 8003240:	6823      	ldr	r3, [r4, #0]
 8003242:	442b      	add	r3, r5
 8003244:	6023      	str	r3, [r4, #0]
 8003246:	f8d8 3000 	ldr.w	r3, [r8]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	bb62      	cbnz	r2, 80032a8 <_malloc_r+0xdc>
 800324e:	f8c8 7000 	str.w	r7, [r8]
 8003252:	e00f      	b.n	8003274 <_malloc_r+0xa8>
 8003254:	6822      	ldr	r2, [r4, #0]
 8003256:	1b52      	subs	r2, r2, r5
 8003258:	d420      	bmi.n	800329c <_malloc_r+0xd0>
 800325a:	2a0b      	cmp	r2, #11
 800325c:	d917      	bls.n	800328e <_malloc_r+0xc2>
 800325e:	1961      	adds	r1, r4, r5
 8003260:	42a3      	cmp	r3, r4
 8003262:	6025      	str	r5, [r4, #0]
 8003264:	bf18      	it	ne
 8003266:	6059      	strne	r1, [r3, #4]
 8003268:	6863      	ldr	r3, [r4, #4]
 800326a:	bf08      	it	eq
 800326c:	f8c8 1000 	streq.w	r1, [r8]
 8003270:	5162      	str	r2, [r4, r5]
 8003272:	604b      	str	r3, [r1, #4]
 8003274:	4630      	mov	r0, r6
 8003276:	f000 f82f 	bl	80032d8 <__malloc_unlock>
 800327a:	f104 000b 	add.w	r0, r4, #11
 800327e:	1d23      	adds	r3, r4, #4
 8003280:	f020 0007 	bic.w	r0, r0, #7
 8003284:	1ac2      	subs	r2, r0, r3
 8003286:	bf1c      	itt	ne
 8003288:	1a1b      	subne	r3, r3, r0
 800328a:	50a3      	strne	r3, [r4, r2]
 800328c:	e7af      	b.n	80031ee <_malloc_r+0x22>
 800328e:	6862      	ldr	r2, [r4, #4]
 8003290:	42a3      	cmp	r3, r4
 8003292:	bf0c      	ite	eq
 8003294:	f8c8 2000 	streq.w	r2, [r8]
 8003298:	605a      	strne	r2, [r3, #4]
 800329a:	e7eb      	b.n	8003274 <_malloc_r+0xa8>
 800329c:	4623      	mov	r3, r4
 800329e:	6864      	ldr	r4, [r4, #4]
 80032a0:	e7ae      	b.n	8003200 <_malloc_r+0x34>
 80032a2:	463c      	mov	r4, r7
 80032a4:	687f      	ldr	r7, [r7, #4]
 80032a6:	e7b6      	b.n	8003216 <_malloc_r+0x4a>
 80032a8:	461a      	mov	r2, r3
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	42a3      	cmp	r3, r4
 80032ae:	d1fb      	bne.n	80032a8 <_malloc_r+0xdc>
 80032b0:	2300      	movs	r3, #0
 80032b2:	6053      	str	r3, [r2, #4]
 80032b4:	e7de      	b.n	8003274 <_malloc_r+0xa8>
 80032b6:	230c      	movs	r3, #12
 80032b8:	6033      	str	r3, [r6, #0]
 80032ba:	4630      	mov	r0, r6
 80032bc:	f000 f80c 	bl	80032d8 <__malloc_unlock>
 80032c0:	e794      	b.n	80031ec <_malloc_r+0x20>
 80032c2:	6005      	str	r5, [r0, #0]
 80032c4:	e7d6      	b.n	8003274 <_malloc_r+0xa8>
 80032c6:	bf00      	nop
 80032c8:	20000244 	.word	0x20000244

080032cc <__malloc_lock>:
 80032cc:	4801      	ldr	r0, [pc, #4]	@ (80032d4 <__malloc_lock+0x8>)
 80032ce:	f7ff bf0f 	b.w	80030f0 <__retarget_lock_acquire_recursive>
 80032d2:	bf00      	nop
 80032d4:	2000023c 	.word	0x2000023c

080032d8 <__malloc_unlock>:
 80032d8:	4801      	ldr	r0, [pc, #4]	@ (80032e0 <__malloc_unlock+0x8>)
 80032da:	f7ff bf0a 	b.w	80030f2 <__retarget_lock_release_recursive>
 80032de:	bf00      	nop
 80032e0:	2000023c 	.word	0x2000023c

080032e4 <__ssputs_r>:
 80032e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032e8:	688e      	ldr	r6, [r1, #8]
 80032ea:	461f      	mov	r7, r3
 80032ec:	42be      	cmp	r6, r7
 80032ee:	680b      	ldr	r3, [r1, #0]
 80032f0:	4682      	mov	sl, r0
 80032f2:	460c      	mov	r4, r1
 80032f4:	4690      	mov	r8, r2
 80032f6:	d82d      	bhi.n	8003354 <__ssputs_r+0x70>
 80032f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80032fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003300:	d026      	beq.n	8003350 <__ssputs_r+0x6c>
 8003302:	6965      	ldr	r5, [r4, #20]
 8003304:	6909      	ldr	r1, [r1, #16]
 8003306:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800330a:	eba3 0901 	sub.w	r9, r3, r1
 800330e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003312:	1c7b      	adds	r3, r7, #1
 8003314:	444b      	add	r3, r9
 8003316:	106d      	asrs	r5, r5, #1
 8003318:	429d      	cmp	r5, r3
 800331a:	bf38      	it	cc
 800331c:	461d      	movcc	r5, r3
 800331e:	0553      	lsls	r3, r2, #21
 8003320:	d527      	bpl.n	8003372 <__ssputs_r+0x8e>
 8003322:	4629      	mov	r1, r5
 8003324:	f7ff ff52 	bl	80031cc <_malloc_r>
 8003328:	4606      	mov	r6, r0
 800332a:	b360      	cbz	r0, 8003386 <__ssputs_r+0xa2>
 800332c:	6921      	ldr	r1, [r4, #16]
 800332e:	464a      	mov	r2, r9
 8003330:	f000 fe78 	bl	8004024 <memcpy>
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800333a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	6126      	str	r6, [r4, #16]
 8003342:	6165      	str	r5, [r4, #20]
 8003344:	444e      	add	r6, r9
 8003346:	eba5 0509 	sub.w	r5, r5, r9
 800334a:	6026      	str	r6, [r4, #0]
 800334c:	60a5      	str	r5, [r4, #8]
 800334e:	463e      	mov	r6, r7
 8003350:	42be      	cmp	r6, r7
 8003352:	d900      	bls.n	8003356 <__ssputs_r+0x72>
 8003354:	463e      	mov	r6, r7
 8003356:	6820      	ldr	r0, [r4, #0]
 8003358:	4632      	mov	r2, r6
 800335a:	4641      	mov	r1, r8
 800335c:	f000 fe37 	bl	8003fce <memmove>
 8003360:	68a3      	ldr	r3, [r4, #8]
 8003362:	1b9b      	subs	r3, r3, r6
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	6823      	ldr	r3, [r4, #0]
 8003368:	4433      	add	r3, r6
 800336a:	6023      	str	r3, [r4, #0]
 800336c:	2000      	movs	r0, #0
 800336e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003372:	462a      	mov	r2, r5
 8003374:	f000 fe64 	bl	8004040 <_realloc_r>
 8003378:	4606      	mov	r6, r0
 800337a:	2800      	cmp	r0, #0
 800337c:	d1e0      	bne.n	8003340 <__ssputs_r+0x5c>
 800337e:	6921      	ldr	r1, [r4, #16]
 8003380:	4650      	mov	r0, sl
 8003382:	f7ff feb7 	bl	80030f4 <_free_r>
 8003386:	230c      	movs	r3, #12
 8003388:	f8ca 3000 	str.w	r3, [sl]
 800338c:	89a3      	ldrh	r3, [r4, #12]
 800338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003392:	81a3      	strh	r3, [r4, #12]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295
 8003398:	e7e9      	b.n	800336e <__ssputs_r+0x8a>
	...

0800339c <_svfiprintf_r>:
 800339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033a0:	4698      	mov	r8, r3
 80033a2:	898b      	ldrh	r3, [r1, #12]
 80033a4:	061b      	lsls	r3, r3, #24
 80033a6:	b09d      	sub	sp, #116	@ 0x74
 80033a8:	4607      	mov	r7, r0
 80033aa:	460d      	mov	r5, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	d510      	bpl.n	80033d2 <_svfiprintf_r+0x36>
 80033b0:	690b      	ldr	r3, [r1, #16]
 80033b2:	b973      	cbnz	r3, 80033d2 <_svfiprintf_r+0x36>
 80033b4:	2140      	movs	r1, #64	@ 0x40
 80033b6:	f7ff ff09 	bl	80031cc <_malloc_r>
 80033ba:	6028      	str	r0, [r5, #0]
 80033bc:	6128      	str	r0, [r5, #16]
 80033be:	b930      	cbnz	r0, 80033ce <_svfiprintf_r+0x32>
 80033c0:	230c      	movs	r3, #12
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295
 80033c8:	b01d      	add	sp, #116	@ 0x74
 80033ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ce:	2340      	movs	r3, #64	@ 0x40
 80033d0:	616b      	str	r3, [r5, #20]
 80033d2:	2300      	movs	r3, #0
 80033d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80033d6:	2320      	movs	r3, #32
 80033d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80033e0:	2330      	movs	r3, #48	@ 0x30
 80033e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003580 <_svfiprintf_r+0x1e4>
 80033e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80033ea:	f04f 0901 	mov.w	r9, #1
 80033ee:	4623      	mov	r3, r4
 80033f0:	469a      	mov	sl, r3
 80033f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033f6:	b10a      	cbz	r2, 80033fc <_svfiprintf_r+0x60>
 80033f8:	2a25      	cmp	r2, #37	@ 0x25
 80033fa:	d1f9      	bne.n	80033f0 <_svfiprintf_r+0x54>
 80033fc:	ebba 0b04 	subs.w	fp, sl, r4
 8003400:	d00b      	beq.n	800341a <_svfiprintf_r+0x7e>
 8003402:	465b      	mov	r3, fp
 8003404:	4622      	mov	r2, r4
 8003406:	4629      	mov	r1, r5
 8003408:	4638      	mov	r0, r7
 800340a:	f7ff ff6b 	bl	80032e4 <__ssputs_r>
 800340e:	3001      	adds	r0, #1
 8003410:	f000 80a7 	beq.w	8003562 <_svfiprintf_r+0x1c6>
 8003414:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003416:	445a      	add	r2, fp
 8003418:	9209      	str	r2, [sp, #36]	@ 0x24
 800341a:	f89a 3000 	ldrb.w	r3, [sl]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 809f 	beq.w	8003562 <_svfiprintf_r+0x1c6>
 8003424:	2300      	movs	r3, #0
 8003426:	f04f 32ff 	mov.w	r2, #4294967295
 800342a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800342e:	f10a 0a01 	add.w	sl, sl, #1
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	9307      	str	r3, [sp, #28]
 8003436:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800343a:	931a      	str	r3, [sp, #104]	@ 0x68
 800343c:	4654      	mov	r4, sl
 800343e:	2205      	movs	r2, #5
 8003440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003444:	484e      	ldr	r0, [pc, #312]	@ (8003580 <_svfiprintf_r+0x1e4>)
 8003446:	f7fc fecb 	bl	80001e0 <memchr>
 800344a:	9a04      	ldr	r2, [sp, #16]
 800344c:	b9d8      	cbnz	r0, 8003486 <_svfiprintf_r+0xea>
 800344e:	06d0      	lsls	r0, r2, #27
 8003450:	bf44      	itt	mi
 8003452:	2320      	movmi	r3, #32
 8003454:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003458:	0711      	lsls	r1, r2, #28
 800345a:	bf44      	itt	mi
 800345c:	232b      	movmi	r3, #43	@ 0x2b
 800345e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003462:	f89a 3000 	ldrb.w	r3, [sl]
 8003466:	2b2a      	cmp	r3, #42	@ 0x2a
 8003468:	d015      	beq.n	8003496 <_svfiprintf_r+0xfa>
 800346a:	9a07      	ldr	r2, [sp, #28]
 800346c:	4654      	mov	r4, sl
 800346e:	2000      	movs	r0, #0
 8003470:	f04f 0c0a 	mov.w	ip, #10
 8003474:	4621      	mov	r1, r4
 8003476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800347a:	3b30      	subs	r3, #48	@ 0x30
 800347c:	2b09      	cmp	r3, #9
 800347e:	d94b      	bls.n	8003518 <_svfiprintf_r+0x17c>
 8003480:	b1b0      	cbz	r0, 80034b0 <_svfiprintf_r+0x114>
 8003482:	9207      	str	r2, [sp, #28]
 8003484:	e014      	b.n	80034b0 <_svfiprintf_r+0x114>
 8003486:	eba0 0308 	sub.w	r3, r0, r8
 800348a:	fa09 f303 	lsl.w	r3, r9, r3
 800348e:	4313      	orrs	r3, r2
 8003490:	9304      	str	r3, [sp, #16]
 8003492:	46a2      	mov	sl, r4
 8003494:	e7d2      	b.n	800343c <_svfiprintf_r+0xa0>
 8003496:	9b03      	ldr	r3, [sp, #12]
 8003498:	1d19      	adds	r1, r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	9103      	str	r1, [sp, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfbb      	ittet	lt
 80034a2:	425b      	neglt	r3, r3
 80034a4:	f042 0202 	orrlt.w	r2, r2, #2
 80034a8:	9307      	strge	r3, [sp, #28]
 80034aa:	9307      	strlt	r3, [sp, #28]
 80034ac:	bfb8      	it	lt
 80034ae:	9204      	strlt	r2, [sp, #16]
 80034b0:	7823      	ldrb	r3, [r4, #0]
 80034b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80034b4:	d10a      	bne.n	80034cc <_svfiprintf_r+0x130>
 80034b6:	7863      	ldrb	r3, [r4, #1]
 80034b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80034ba:	d132      	bne.n	8003522 <_svfiprintf_r+0x186>
 80034bc:	9b03      	ldr	r3, [sp, #12]
 80034be:	1d1a      	adds	r2, r3, #4
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	9203      	str	r2, [sp, #12]
 80034c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034c8:	3402      	adds	r4, #2
 80034ca:	9305      	str	r3, [sp, #20]
 80034cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003590 <_svfiprintf_r+0x1f4>
 80034d0:	7821      	ldrb	r1, [r4, #0]
 80034d2:	2203      	movs	r2, #3
 80034d4:	4650      	mov	r0, sl
 80034d6:	f7fc fe83 	bl	80001e0 <memchr>
 80034da:	b138      	cbz	r0, 80034ec <_svfiprintf_r+0x150>
 80034dc:	9b04      	ldr	r3, [sp, #16]
 80034de:	eba0 000a 	sub.w	r0, r0, sl
 80034e2:	2240      	movs	r2, #64	@ 0x40
 80034e4:	4082      	lsls	r2, r0
 80034e6:	4313      	orrs	r3, r2
 80034e8:	3401      	adds	r4, #1
 80034ea:	9304      	str	r3, [sp, #16]
 80034ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034f0:	4824      	ldr	r0, [pc, #144]	@ (8003584 <_svfiprintf_r+0x1e8>)
 80034f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80034f6:	2206      	movs	r2, #6
 80034f8:	f7fc fe72 	bl	80001e0 <memchr>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	d036      	beq.n	800356e <_svfiprintf_r+0x1d2>
 8003500:	4b21      	ldr	r3, [pc, #132]	@ (8003588 <_svfiprintf_r+0x1ec>)
 8003502:	bb1b      	cbnz	r3, 800354c <_svfiprintf_r+0x1b0>
 8003504:	9b03      	ldr	r3, [sp, #12]
 8003506:	3307      	adds	r3, #7
 8003508:	f023 0307 	bic.w	r3, r3, #7
 800350c:	3308      	adds	r3, #8
 800350e:	9303      	str	r3, [sp, #12]
 8003510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003512:	4433      	add	r3, r6
 8003514:	9309      	str	r3, [sp, #36]	@ 0x24
 8003516:	e76a      	b.n	80033ee <_svfiprintf_r+0x52>
 8003518:	fb0c 3202 	mla	r2, ip, r2, r3
 800351c:	460c      	mov	r4, r1
 800351e:	2001      	movs	r0, #1
 8003520:	e7a8      	b.n	8003474 <_svfiprintf_r+0xd8>
 8003522:	2300      	movs	r3, #0
 8003524:	3401      	adds	r4, #1
 8003526:	9305      	str	r3, [sp, #20]
 8003528:	4619      	mov	r1, r3
 800352a:	f04f 0c0a 	mov.w	ip, #10
 800352e:	4620      	mov	r0, r4
 8003530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003534:	3a30      	subs	r2, #48	@ 0x30
 8003536:	2a09      	cmp	r2, #9
 8003538:	d903      	bls.n	8003542 <_svfiprintf_r+0x1a6>
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0c6      	beq.n	80034cc <_svfiprintf_r+0x130>
 800353e:	9105      	str	r1, [sp, #20]
 8003540:	e7c4      	b.n	80034cc <_svfiprintf_r+0x130>
 8003542:	fb0c 2101 	mla	r1, ip, r1, r2
 8003546:	4604      	mov	r4, r0
 8003548:	2301      	movs	r3, #1
 800354a:	e7f0      	b.n	800352e <_svfiprintf_r+0x192>
 800354c:	ab03      	add	r3, sp, #12
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	462a      	mov	r2, r5
 8003552:	4b0e      	ldr	r3, [pc, #56]	@ (800358c <_svfiprintf_r+0x1f0>)
 8003554:	a904      	add	r1, sp, #16
 8003556:	4638      	mov	r0, r7
 8003558:	f3af 8000 	nop.w
 800355c:	1c42      	adds	r2, r0, #1
 800355e:	4606      	mov	r6, r0
 8003560:	d1d6      	bne.n	8003510 <_svfiprintf_r+0x174>
 8003562:	89ab      	ldrh	r3, [r5, #12]
 8003564:	065b      	lsls	r3, r3, #25
 8003566:	f53f af2d 	bmi.w	80033c4 <_svfiprintf_r+0x28>
 800356a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800356c:	e72c      	b.n	80033c8 <_svfiprintf_r+0x2c>
 800356e:	ab03      	add	r3, sp, #12
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	462a      	mov	r2, r5
 8003574:	4b05      	ldr	r3, [pc, #20]	@ (800358c <_svfiprintf_r+0x1f0>)
 8003576:	a904      	add	r1, sp, #16
 8003578:	4638      	mov	r0, r7
 800357a:	f000 fa49 	bl	8003a10 <_printf_i>
 800357e:	e7ed      	b.n	800355c <_svfiprintf_r+0x1c0>
 8003580:	0800d674 	.word	0x0800d674
 8003584:	0800d67e 	.word	0x0800d67e
 8003588:	00000000 	.word	0x00000000
 800358c:	080032e5 	.word	0x080032e5
 8003590:	0800d67a 	.word	0x0800d67a

08003594 <_sungetc_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	1c4b      	adds	r3, r1, #1
 8003598:	4614      	mov	r4, r2
 800359a:	d103      	bne.n	80035a4 <_sungetc_r+0x10>
 800359c:	f04f 35ff 	mov.w	r5, #4294967295
 80035a0:	4628      	mov	r0, r5
 80035a2:	bd38      	pop	{r3, r4, r5, pc}
 80035a4:	8993      	ldrh	r3, [r2, #12]
 80035a6:	f023 0320 	bic.w	r3, r3, #32
 80035aa:	8193      	strh	r3, [r2, #12]
 80035ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80035ae:	6852      	ldr	r2, [r2, #4]
 80035b0:	b2cd      	uxtb	r5, r1
 80035b2:	b18b      	cbz	r3, 80035d8 <_sungetc_r+0x44>
 80035b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80035b6:	4293      	cmp	r3, r2
 80035b8:	dd08      	ble.n	80035cc <_sungetc_r+0x38>
 80035ba:	6823      	ldr	r3, [r4, #0]
 80035bc:	1e5a      	subs	r2, r3, #1
 80035be:	6022      	str	r2, [r4, #0]
 80035c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80035c4:	6863      	ldr	r3, [r4, #4]
 80035c6:	3301      	adds	r3, #1
 80035c8:	6063      	str	r3, [r4, #4]
 80035ca:	e7e9      	b.n	80035a0 <_sungetc_r+0xc>
 80035cc:	4621      	mov	r1, r4
 80035ce:	f000 fcc4 	bl	8003f5a <__submore>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d0f1      	beq.n	80035ba <_sungetc_r+0x26>
 80035d6:	e7e1      	b.n	800359c <_sungetc_r+0x8>
 80035d8:	6921      	ldr	r1, [r4, #16]
 80035da:	6823      	ldr	r3, [r4, #0]
 80035dc:	b151      	cbz	r1, 80035f4 <_sungetc_r+0x60>
 80035de:	4299      	cmp	r1, r3
 80035e0:	d208      	bcs.n	80035f4 <_sungetc_r+0x60>
 80035e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80035e6:	42a9      	cmp	r1, r5
 80035e8:	d104      	bne.n	80035f4 <_sungetc_r+0x60>
 80035ea:	3b01      	subs	r3, #1
 80035ec:	3201      	adds	r2, #1
 80035ee:	6023      	str	r3, [r4, #0]
 80035f0:	6062      	str	r2, [r4, #4]
 80035f2:	e7d5      	b.n	80035a0 <_sungetc_r+0xc>
 80035f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80035f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80035fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80035fe:	2303      	movs	r3, #3
 8003600:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003602:	4623      	mov	r3, r4
 8003604:	f803 5f46 	strb.w	r5, [r3, #70]!
 8003608:	6023      	str	r3, [r4, #0]
 800360a:	2301      	movs	r3, #1
 800360c:	e7dc      	b.n	80035c8 <_sungetc_r+0x34>

0800360e <__ssrefill_r>:
 800360e:	b510      	push	{r4, lr}
 8003610:	460c      	mov	r4, r1
 8003612:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003614:	b169      	cbz	r1, 8003632 <__ssrefill_r+0x24>
 8003616:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800361a:	4299      	cmp	r1, r3
 800361c:	d001      	beq.n	8003622 <__ssrefill_r+0x14>
 800361e:	f7ff fd69 	bl	80030f4 <_free_r>
 8003622:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	2000      	movs	r0, #0
 8003628:	6360      	str	r0, [r4, #52]	@ 0x34
 800362a:	b113      	cbz	r3, 8003632 <__ssrefill_r+0x24>
 800362c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800362e:	6023      	str	r3, [r4, #0]
 8003630:	bd10      	pop	{r4, pc}
 8003632:	6923      	ldr	r3, [r4, #16]
 8003634:	6023      	str	r3, [r4, #0]
 8003636:	2300      	movs	r3, #0
 8003638:	6063      	str	r3, [r4, #4]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0320 	orr.w	r3, r3, #32
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	f04f 30ff 	mov.w	r0, #4294967295
 8003646:	e7f3      	b.n	8003630 <__ssrefill_r+0x22>

08003648 <__ssvfiscanf_r>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	460c      	mov	r4, r1
 800364e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 8003652:	2100      	movs	r1, #0
 8003654:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8003658:	49a6      	ldr	r1, [pc, #664]	@ (80038f4 <__ssvfiscanf_r+0x2ac>)
 800365a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800365c:	f10d 0804 	add.w	r8, sp, #4
 8003660:	49a5      	ldr	r1, [pc, #660]	@ (80038f8 <__ssvfiscanf_r+0x2b0>)
 8003662:	4fa6      	ldr	r7, [pc, #664]	@ (80038fc <__ssvfiscanf_r+0x2b4>)
 8003664:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8003668:	4606      	mov	r6, r0
 800366a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	f892 9000 	ldrb.w	r9, [r2]
 8003672:	f1b9 0f00 	cmp.w	r9, #0
 8003676:	f000 8158 	beq.w	800392a <__ssvfiscanf_r+0x2e2>
 800367a:	f817 3009 	ldrb.w	r3, [r7, r9]
 800367e:	f013 0308 	ands.w	r3, r3, #8
 8003682:	f102 0501 	add.w	r5, r2, #1
 8003686:	d019      	beq.n	80036bc <__ssvfiscanf_r+0x74>
 8003688:	6863      	ldr	r3, [r4, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	dd0f      	ble.n	80036ae <__ssvfiscanf_r+0x66>
 800368e:	6823      	ldr	r3, [r4, #0]
 8003690:	781a      	ldrb	r2, [r3, #0]
 8003692:	5cba      	ldrb	r2, [r7, r2]
 8003694:	0712      	lsls	r2, r2, #28
 8003696:	d401      	bmi.n	800369c <__ssvfiscanf_r+0x54>
 8003698:	462a      	mov	r2, r5
 800369a:	e7e8      	b.n	800366e <__ssvfiscanf_r+0x26>
 800369c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800369e:	3201      	adds	r2, #1
 80036a0:	9245      	str	r2, [sp, #276]	@ 0x114
 80036a2:	6862      	ldr	r2, [r4, #4]
 80036a4:	3301      	adds	r3, #1
 80036a6:	3a01      	subs	r2, #1
 80036a8:	6062      	str	r2, [r4, #4]
 80036aa:	6023      	str	r3, [r4, #0]
 80036ac:	e7ec      	b.n	8003688 <__ssvfiscanf_r+0x40>
 80036ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80036b0:	4621      	mov	r1, r4
 80036b2:	4630      	mov	r0, r6
 80036b4:	4798      	blx	r3
 80036b6:	2800      	cmp	r0, #0
 80036b8:	d0e9      	beq.n	800368e <__ssvfiscanf_r+0x46>
 80036ba:	e7ed      	b.n	8003698 <__ssvfiscanf_r+0x50>
 80036bc:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 80036c0:	f040 8085 	bne.w	80037ce <__ssvfiscanf_r+0x186>
 80036c4:	9341      	str	r3, [sp, #260]	@ 0x104
 80036c6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80036c8:	7853      	ldrb	r3, [r2, #1]
 80036ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80036cc:	bf02      	ittt	eq
 80036ce:	2310      	moveq	r3, #16
 80036d0:	1c95      	addeq	r5, r2, #2
 80036d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80036d4:	220a      	movs	r2, #10
 80036d6:	46aa      	mov	sl, r5
 80036d8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80036dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80036e0:	2b09      	cmp	r3, #9
 80036e2:	d91e      	bls.n	8003722 <__ssvfiscanf_r+0xda>
 80036e4:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8003900 <__ssvfiscanf_r+0x2b8>
 80036e8:	2203      	movs	r2, #3
 80036ea:	4658      	mov	r0, fp
 80036ec:	f7fc fd78 	bl	80001e0 <memchr>
 80036f0:	b138      	cbz	r0, 8003702 <__ssvfiscanf_r+0xba>
 80036f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80036f4:	eba0 000b 	sub.w	r0, r0, fp
 80036f8:	2301      	movs	r3, #1
 80036fa:	4083      	lsls	r3, r0
 80036fc:	4313      	orrs	r3, r2
 80036fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8003700:	4655      	mov	r5, sl
 8003702:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003706:	2b78      	cmp	r3, #120	@ 0x78
 8003708:	d806      	bhi.n	8003718 <__ssvfiscanf_r+0xd0>
 800370a:	2b57      	cmp	r3, #87	@ 0x57
 800370c:	d810      	bhi.n	8003730 <__ssvfiscanf_r+0xe8>
 800370e:	2b25      	cmp	r3, #37	@ 0x25
 8003710:	d05d      	beq.n	80037ce <__ssvfiscanf_r+0x186>
 8003712:	d857      	bhi.n	80037c4 <__ssvfiscanf_r+0x17c>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d075      	beq.n	8003804 <__ssvfiscanf_r+0x1bc>
 8003718:	2303      	movs	r3, #3
 800371a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800371c:	230a      	movs	r3, #10
 800371e:	9342      	str	r3, [sp, #264]	@ 0x108
 8003720:	e088      	b.n	8003834 <__ssvfiscanf_r+0x1ec>
 8003722:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8003724:	fb02 1103 	mla	r1, r2, r3, r1
 8003728:	3930      	subs	r1, #48	@ 0x30
 800372a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800372c:	4655      	mov	r5, sl
 800372e:	e7d2      	b.n	80036d6 <__ssvfiscanf_r+0x8e>
 8003730:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8003734:	2a20      	cmp	r2, #32
 8003736:	d8ef      	bhi.n	8003718 <__ssvfiscanf_r+0xd0>
 8003738:	a101      	add	r1, pc, #4	@ (adr r1, 8003740 <__ssvfiscanf_r+0xf8>)
 800373a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003813 	.word	0x08003813
 8003744:	08003719 	.word	0x08003719
 8003748:	08003719 	.word	0x08003719
 800374c:	0800386d 	.word	0x0800386d
 8003750:	08003719 	.word	0x08003719
 8003754:	08003719 	.word	0x08003719
 8003758:	08003719 	.word	0x08003719
 800375c:	08003719 	.word	0x08003719
 8003760:	08003719 	.word	0x08003719
 8003764:	08003719 	.word	0x08003719
 8003768:	08003719 	.word	0x08003719
 800376c:	08003883 	.word	0x08003883
 8003770:	08003869 	.word	0x08003869
 8003774:	080037cb 	.word	0x080037cb
 8003778:	080037cb 	.word	0x080037cb
 800377c:	080037cb 	.word	0x080037cb
 8003780:	08003719 	.word	0x08003719
 8003784:	08003825 	.word	0x08003825
 8003788:	08003719 	.word	0x08003719
 800378c:	08003719 	.word	0x08003719
 8003790:	08003719 	.word	0x08003719
 8003794:	08003719 	.word	0x08003719
 8003798:	08003893 	.word	0x08003893
 800379c:	0800382d 	.word	0x0800382d
 80037a0:	0800380b 	.word	0x0800380b
 80037a4:	08003719 	.word	0x08003719
 80037a8:	08003719 	.word	0x08003719
 80037ac:	0800388f 	.word	0x0800388f
 80037b0:	08003719 	.word	0x08003719
 80037b4:	08003869 	.word	0x08003869
 80037b8:	08003719 	.word	0x08003719
 80037bc:	08003719 	.word	0x08003719
 80037c0:	08003813 	.word	0x08003813
 80037c4:	3b45      	subs	r3, #69	@ 0x45
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d8a6      	bhi.n	8003718 <__ssvfiscanf_r+0xd0>
 80037ca:	2305      	movs	r3, #5
 80037cc:	e031      	b.n	8003832 <__ssvfiscanf_r+0x1ea>
 80037ce:	6863      	ldr	r3, [r4, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	dd0d      	ble.n	80037f0 <__ssvfiscanf_r+0x1a8>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	454a      	cmp	r2, r9
 80037da:	f040 80a6 	bne.w	800392a <__ssvfiscanf_r+0x2e2>
 80037de:	3301      	adds	r3, #1
 80037e0:	6862      	ldr	r2, [r4, #4]
 80037e2:	6023      	str	r3, [r4, #0]
 80037e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80037e6:	3a01      	subs	r2, #1
 80037e8:	3301      	adds	r3, #1
 80037ea:	6062      	str	r2, [r4, #4]
 80037ec:	9345      	str	r3, [sp, #276]	@ 0x114
 80037ee:	e753      	b.n	8003698 <__ssvfiscanf_r+0x50>
 80037f0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80037f2:	4621      	mov	r1, r4
 80037f4:	4630      	mov	r0, r6
 80037f6:	4798      	blx	r3
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d0eb      	beq.n	80037d4 <__ssvfiscanf_r+0x18c>
 80037fc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80037fe:	2800      	cmp	r0, #0
 8003800:	f040 808b 	bne.w	800391a <__ssvfiscanf_r+0x2d2>
 8003804:	f04f 30ff 	mov.w	r0, #4294967295
 8003808:	e08b      	b.n	8003922 <__ssvfiscanf_r+0x2da>
 800380a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800380c:	f042 0220 	orr.w	r2, r2, #32
 8003810:	9241      	str	r2, [sp, #260]	@ 0x104
 8003812:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8003814:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003818:	9241      	str	r2, [sp, #260]	@ 0x104
 800381a:	2210      	movs	r2, #16
 800381c:	2b6e      	cmp	r3, #110	@ 0x6e
 800381e:	9242      	str	r2, [sp, #264]	@ 0x108
 8003820:	d902      	bls.n	8003828 <__ssvfiscanf_r+0x1e0>
 8003822:	e005      	b.n	8003830 <__ssvfiscanf_r+0x1e8>
 8003824:	2300      	movs	r3, #0
 8003826:	9342      	str	r3, [sp, #264]	@ 0x108
 8003828:	2303      	movs	r3, #3
 800382a:	e002      	b.n	8003832 <__ssvfiscanf_r+0x1ea>
 800382c:	2308      	movs	r3, #8
 800382e:	9342      	str	r3, [sp, #264]	@ 0x108
 8003830:	2304      	movs	r3, #4
 8003832:	9347      	str	r3, [sp, #284]	@ 0x11c
 8003834:	6863      	ldr	r3, [r4, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	dd39      	ble.n	80038ae <__ssvfiscanf_r+0x266>
 800383a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800383c:	0659      	lsls	r1, r3, #25
 800383e:	d404      	bmi.n	800384a <__ssvfiscanf_r+0x202>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	5cba      	ldrb	r2, [r7, r2]
 8003846:	0712      	lsls	r2, r2, #28
 8003848:	d438      	bmi.n	80038bc <__ssvfiscanf_r+0x274>
 800384a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800384c:	2b02      	cmp	r3, #2
 800384e:	dc47      	bgt.n	80038e0 <__ssvfiscanf_r+0x298>
 8003850:	466b      	mov	r3, sp
 8003852:	4622      	mov	r2, r4
 8003854:	a941      	add	r1, sp, #260	@ 0x104
 8003856:	4630      	mov	r0, r6
 8003858:	f000 f9f8 	bl	8003c4c <_scanf_chars>
 800385c:	2801      	cmp	r0, #1
 800385e:	d064      	beq.n	800392a <__ssvfiscanf_r+0x2e2>
 8003860:	2802      	cmp	r0, #2
 8003862:	f47f af19 	bne.w	8003698 <__ssvfiscanf_r+0x50>
 8003866:	e7c9      	b.n	80037fc <__ssvfiscanf_r+0x1b4>
 8003868:	220a      	movs	r2, #10
 800386a:	e7d7      	b.n	800381c <__ssvfiscanf_r+0x1d4>
 800386c:	4629      	mov	r1, r5
 800386e:	4640      	mov	r0, r8
 8003870:	f000 fb3a 	bl	8003ee8 <__sccl>
 8003874:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800387a:	9341      	str	r3, [sp, #260]	@ 0x104
 800387c:	4605      	mov	r5, r0
 800387e:	2301      	movs	r3, #1
 8003880:	e7d7      	b.n	8003832 <__ssvfiscanf_r+0x1ea>
 8003882:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8003884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003888:	9341      	str	r3, [sp, #260]	@ 0x104
 800388a:	2300      	movs	r3, #0
 800388c:	e7d1      	b.n	8003832 <__ssvfiscanf_r+0x1ea>
 800388e:	2302      	movs	r3, #2
 8003890:	e7cf      	b.n	8003832 <__ssvfiscanf_r+0x1ea>
 8003892:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8003894:	06c3      	lsls	r3, r0, #27
 8003896:	f53f aeff 	bmi.w	8003698 <__ssvfiscanf_r+0x50>
 800389a:	9b00      	ldr	r3, [sp, #0]
 800389c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800389e:	1d19      	adds	r1, r3, #4
 80038a0:	9100      	str	r1, [sp, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	07c0      	lsls	r0, r0, #31
 80038a6:	bf4c      	ite	mi
 80038a8:	801a      	strhmi	r2, [r3, #0]
 80038aa:	601a      	strpl	r2, [r3, #0]
 80038ac:	e6f4      	b.n	8003698 <__ssvfiscanf_r+0x50>
 80038ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80038b0:	4621      	mov	r1, r4
 80038b2:	4630      	mov	r0, r6
 80038b4:	4798      	blx	r3
 80038b6:	2800      	cmp	r0, #0
 80038b8:	d0bf      	beq.n	800383a <__ssvfiscanf_r+0x1f2>
 80038ba:	e79f      	b.n	80037fc <__ssvfiscanf_r+0x1b4>
 80038bc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80038be:	3201      	adds	r2, #1
 80038c0:	9245      	str	r2, [sp, #276]	@ 0x114
 80038c2:	6862      	ldr	r2, [r4, #4]
 80038c4:	3a01      	subs	r2, #1
 80038c6:	2a00      	cmp	r2, #0
 80038c8:	6062      	str	r2, [r4, #4]
 80038ca:	dd02      	ble.n	80038d2 <__ssvfiscanf_r+0x28a>
 80038cc:	3301      	adds	r3, #1
 80038ce:	6023      	str	r3, [r4, #0]
 80038d0:	e7b6      	b.n	8003840 <__ssvfiscanf_r+0x1f8>
 80038d2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80038d4:	4621      	mov	r1, r4
 80038d6:	4630      	mov	r0, r6
 80038d8:	4798      	blx	r3
 80038da:	2800      	cmp	r0, #0
 80038dc:	d0b0      	beq.n	8003840 <__ssvfiscanf_r+0x1f8>
 80038de:	e78d      	b.n	80037fc <__ssvfiscanf_r+0x1b4>
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	dc0f      	bgt.n	8003904 <__ssvfiscanf_r+0x2bc>
 80038e4:	466b      	mov	r3, sp
 80038e6:	4622      	mov	r2, r4
 80038e8:	a941      	add	r1, sp, #260	@ 0x104
 80038ea:	4630      	mov	r0, r6
 80038ec:	f000 fa08 	bl	8003d00 <_scanf_i>
 80038f0:	e7b4      	b.n	800385c <__ssvfiscanf_r+0x214>
 80038f2:	bf00      	nop
 80038f4:	08003595 	.word	0x08003595
 80038f8:	0800360f 	.word	0x0800360f
 80038fc:	0800d6c3 	.word	0x0800d6c3
 8003900:	0800d67a 	.word	0x0800d67a
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <__ssvfiscanf_r+0x2e8>)
 8003906:	2b00      	cmp	r3, #0
 8003908:	f43f aec6 	beq.w	8003698 <__ssvfiscanf_r+0x50>
 800390c:	466b      	mov	r3, sp
 800390e:	4622      	mov	r2, r4
 8003910:	a941      	add	r1, sp, #260	@ 0x104
 8003912:	4630      	mov	r0, r6
 8003914:	f3af 8000 	nop.w
 8003918:	e7a0      	b.n	800385c <__ssvfiscanf_r+0x214>
 800391a:	89a3      	ldrh	r3, [r4, #12]
 800391c:	065b      	lsls	r3, r3, #25
 800391e:	f53f af71 	bmi.w	8003804 <__ssvfiscanf_r+0x1bc>
 8003922:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8003926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800392c:	e7f9      	b.n	8003922 <__ssvfiscanf_r+0x2da>
 800392e:	bf00      	nop
 8003930:	00000000 	.word	0x00000000

08003934 <_printf_common>:
 8003934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003938:	4616      	mov	r6, r2
 800393a:	4698      	mov	r8, r3
 800393c:	688a      	ldr	r2, [r1, #8]
 800393e:	690b      	ldr	r3, [r1, #16]
 8003940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003944:	4293      	cmp	r3, r2
 8003946:	bfb8      	it	lt
 8003948:	4613      	movlt	r3, r2
 800394a:	6033      	str	r3, [r6, #0]
 800394c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003950:	4607      	mov	r7, r0
 8003952:	460c      	mov	r4, r1
 8003954:	b10a      	cbz	r2, 800395a <_printf_common+0x26>
 8003956:	3301      	adds	r3, #1
 8003958:	6033      	str	r3, [r6, #0]
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	0699      	lsls	r1, r3, #26
 800395e:	bf42      	ittt	mi
 8003960:	6833      	ldrmi	r3, [r6, #0]
 8003962:	3302      	addmi	r3, #2
 8003964:	6033      	strmi	r3, [r6, #0]
 8003966:	6825      	ldr	r5, [r4, #0]
 8003968:	f015 0506 	ands.w	r5, r5, #6
 800396c:	d106      	bne.n	800397c <_printf_common+0x48>
 800396e:	f104 0a19 	add.w	sl, r4, #25
 8003972:	68e3      	ldr	r3, [r4, #12]
 8003974:	6832      	ldr	r2, [r6, #0]
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	42ab      	cmp	r3, r5
 800397a:	dc26      	bgt.n	80039ca <_printf_common+0x96>
 800397c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003980:	6822      	ldr	r2, [r4, #0]
 8003982:	3b00      	subs	r3, #0
 8003984:	bf18      	it	ne
 8003986:	2301      	movne	r3, #1
 8003988:	0692      	lsls	r2, r2, #26
 800398a:	d42b      	bmi.n	80039e4 <_printf_common+0xb0>
 800398c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003990:	4641      	mov	r1, r8
 8003992:	4638      	mov	r0, r7
 8003994:	47c8      	blx	r9
 8003996:	3001      	adds	r0, #1
 8003998:	d01e      	beq.n	80039d8 <_printf_common+0xa4>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	6922      	ldr	r2, [r4, #16]
 800399e:	f003 0306 	and.w	r3, r3, #6
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	bf02      	ittt	eq
 80039a6:	68e5      	ldreq	r5, [r4, #12]
 80039a8:	6833      	ldreq	r3, [r6, #0]
 80039aa:	1aed      	subeq	r5, r5, r3
 80039ac:	68a3      	ldr	r3, [r4, #8]
 80039ae:	bf0c      	ite	eq
 80039b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039b4:	2500      	movne	r5, #0
 80039b6:	4293      	cmp	r3, r2
 80039b8:	bfc4      	itt	gt
 80039ba:	1a9b      	subgt	r3, r3, r2
 80039bc:	18ed      	addgt	r5, r5, r3
 80039be:	2600      	movs	r6, #0
 80039c0:	341a      	adds	r4, #26
 80039c2:	42b5      	cmp	r5, r6
 80039c4:	d11a      	bne.n	80039fc <_printf_common+0xc8>
 80039c6:	2000      	movs	r0, #0
 80039c8:	e008      	b.n	80039dc <_printf_common+0xa8>
 80039ca:	2301      	movs	r3, #1
 80039cc:	4652      	mov	r2, sl
 80039ce:	4641      	mov	r1, r8
 80039d0:	4638      	mov	r0, r7
 80039d2:	47c8      	blx	r9
 80039d4:	3001      	adds	r0, #1
 80039d6:	d103      	bne.n	80039e0 <_printf_common+0xac>
 80039d8:	f04f 30ff 	mov.w	r0, #4294967295
 80039dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e0:	3501      	adds	r5, #1
 80039e2:	e7c6      	b.n	8003972 <_printf_common+0x3e>
 80039e4:	18e1      	adds	r1, r4, r3
 80039e6:	1c5a      	adds	r2, r3, #1
 80039e8:	2030      	movs	r0, #48	@ 0x30
 80039ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039ee:	4422      	add	r2, r4
 80039f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80039f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80039f8:	3302      	adds	r3, #2
 80039fa:	e7c7      	b.n	800398c <_printf_common+0x58>
 80039fc:	2301      	movs	r3, #1
 80039fe:	4622      	mov	r2, r4
 8003a00:	4641      	mov	r1, r8
 8003a02:	4638      	mov	r0, r7
 8003a04:	47c8      	blx	r9
 8003a06:	3001      	adds	r0, #1
 8003a08:	d0e6      	beq.n	80039d8 <_printf_common+0xa4>
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	e7d9      	b.n	80039c2 <_printf_common+0x8e>
	...

08003a10 <_printf_i>:
 8003a10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	7e0f      	ldrb	r7, [r1, #24]
 8003a16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a18:	2f78      	cmp	r7, #120	@ 0x78
 8003a1a:	4691      	mov	r9, r2
 8003a1c:	4680      	mov	r8, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	469a      	mov	sl, r3
 8003a22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a26:	d807      	bhi.n	8003a38 <_printf_i+0x28>
 8003a28:	2f62      	cmp	r7, #98	@ 0x62
 8003a2a:	d80a      	bhi.n	8003a42 <_printf_i+0x32>
 8003a2c:	2f00      	cmp	r7, #0
 8003a2e:	f000 80d1 	beq.w	8003bd4 <_printf_i+0x1c4>
 8003a32:	2f58      	cmp	r7, #88	@ 0x58
 8003a34:	f000 80b8 	beq.w	8003ba8 <_printf_i+0x198>
 8003a38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a40:	e03a      	b.n	8003ab8 <_printf_i+0xa8>
 8003a42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a46:	2b15      	cmp	r3, #21
 8003a48:	d8f6      	bhi.n	8003a38 <_printf_i+0x28>
 8003a4a:	a101      	add	r1, pc, #4	@ (adr r1, 8003a50 <_printf_i+0x40>)
 8003a4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a50:	08003aa9 	.word	0x08003aa9
 8003a54:	08003abd 	.word	0x08003abd
 8003a58:	08003a39 	.word	0x08003a39
 8003a5c:	08003a39 	.word	0x08003a39
 8003a60:	08003a39 	.word	0x08003a39
 8003a64:	08003a39 	.word	0x08003a39
 8003a68:	08003abd 	.word	0x08003abd
 8003a6c:	08003a39 	.word	0x08003a39
 8003a70:	08003a39 	.word	0x08003a39
 8003a74:	08003a39 	.word	0x08003a39
 8003a78:	08003a39 	.word	0x08003a39
 8003a7c:	08003bbb 	.word	0x08003bbb
 8003a80:	08003ae7 	.word	0x08003ae7
 8003a84:	08003b75 	.word	0x08003b75
 8003a88:	08003a39 	.word	0x08003a39
 8003a8c:	08003a39 	.word	0x08003a39
 8003a90:	08003bdd 	.word	0x08003bdd
 8003a94:	08003a39 	.word	0x08003a39
 8003a98:	08003ae7 	.word	0x08003ae7
 8003a9c:	08003a39 	.word	0x08003a39
 8003aa0:	08003a39 	.word	0x08003a39
 8003aa4:	08003b7d 	.word	0x08003b7d
 8003aa8:	6833      	ldr	r3, [r6, #0]
 8003aaa:	1d1a      	adds	r2, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6032      	str	r2, [r6, #0]
 8003ab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ab4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e09c      	b.n	8003bf6 <_printf_i+0x1e6>
 8003abc:	6833      	ldr	r3, [r6, #0]
 8003abe:	6820      	ldr	r0, [r4, #0]
 8003ac0:	1d19      	adds	r1, r3, #4
 8003ac2:	6031      	str	r1, [r6, #0]
 8003ac4:	0606      	lsls	r6, r0, #24
 8003ac6:	d501      	bpl.n	8003acc <_printf_i+0xbc>
 8003ac8:	681d      	ldr	r5, [r3, #0]
 8003aca:	e003      	b.n	8003ad4 <_printf_i+0xc4>
 8003acc:	0645      	lsls	r5, r0, #25
 8003ace:	d5fb      	bpl.n	8003ac8 <_printf_i+0xb8>
 8003ad0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ad4:	2d00      	cmp	r5, #0
 8003ad6:	da03      	bge.n	8003ae0 <_printf_i+0xd0>
 8003ad8:	232d      	movs	r3, #45	@ 0x2d
 8003ada:	426d      	negs	r5, r5
 8003adc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ae0:	4858      	ldr	r0, [pc, #352]	@ (8003c44 <_printf_i+0x234>)
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	e011      	b.n	8003b0a <_printf_i+0xfa>
 8003ae6:	6821      	ldr	r1, [r4, #0]
 8003ae8:	6833      	ldr	r3, [r6, #0]
 8003aea:	0608      	lsls	r0, r1, #24
 8003aec:	f853 5b04 	ldr.w	r5, [r3], #4
 8003af0:	d402      	bmi.n	8003af8 <_printf_i+0xe8>
 8003af2:	0649      	lsls	r1, r1, #25
 8003af4:	bf48      	it	mi
 8003af6:	b2ad      	uxthmi	r5, r5
 8003af8:	2f6f      	cmp	r7, #111	@ 0x6f
 8003afa:	4852      	ldr	r0, [pc, #328]	@ (8003c44 <_printf_i+0x234>)
 8003afc:	6033      	str	r3, [r6, #0]
 8003afe:	bf14      	ite	ne
 8003b00:	230a      	movne	r3, #10
 8003b02:	2308      	moveq	r3, #8
 8003b04:	2100      	movs	r1, #0
 8003b06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b0a:	6866      	ldr	r6, [r4, #4]
 8003b0c:	60a6      	str	r6, [r4, #8]
 8003b0e:	2e00      	cmp	r6, #0
 8003b10:	db05      	blt.n	8003b1e <_printf_i+0x10e>
 8003b12:	6821      	ldr	r1, [r4, #0]
 8003b14:	432e      	orrs	r6, r5
 8003b16:	f021 0104 	bic.w	r1, r1, #4
 8003b1a:	6021      	str	r1, [r4, #0]
 8003b1c:	d04b      	beq.n	8003bb6 <_printf_i+0x1a6>
 8003b1e:	4616      	mov	r6, r2
 8003b20:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b24:	fb03 5711 	mls	r7, r3, r1, r5
 8003b28:	5dc7      	ldrb	r7, [r0, r7]
 8003b2a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b2e:	462f      	mov	r7, r5
 8003b30:	42bb      	cmp	r3, r7
 8003b32:	460d      	mov	r5, r1
 8003b34:	d9f4      	bls.n	8003b20 <_printf_i+0x110>
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d10b      	bne.n	8003b52 <_printf_i+0x142>
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	07df      	lsls	r7, r3, #31
 8003b3e:	d508      	bpl.n	8003b52 <_printf_i+0x142>
 8003b40:	6923      	ldr	r3, [r4, #16]
 8003b42:	6861      	ldr	r1, [r4, #4]
 8003b44:	4299      	cmp	r1, r3
 8003b46:	bfde      	ittt	le
 8003b48:	2330      	movle	r3, #48	@ 0x30
 8003b4a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b4e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b52:	1b92      	subs	r2, r2, r6
 8003b54:	6122      	str	r2, [r4, #16]
 8003b56:	f8cd a000 	str.w	sl, [sp]
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	aa03      	add	r2, sp, #12
 8003b5e:	4621      	mov	r1, r4
 8003b60:	4640      	mov	r0, r8
 8003b62:	f7ff fee7 	bl	8003934 <_printf_common>
 8003b66:	3001      	adds	r0, #1
 8003b68:	d14a      	bne.n	8003c00 <_printf_i+0x1f0>
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b6e:	b004      	add	sp, #16
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	f043 0320 	orr.w	r3, r3, #32
 8003b7a:	6023      	str	r3, [r4, #0]
 8003b7c:	4832      	ldr	r0, [pc, #200]	@ (8003c48 <_printf_i+0x238>)
 8003b7e:	2778      	movs	r7, #120	@ 0x78
 8003b80:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b84:	6823      	ldr	r3, [r4, #0]
 8003b86:	6831      	ldr	r1, [r6, #0]
 8003b88:	061f      	lsls	r7, r3, #24
 8003b8a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b8e:	d402      	bmi.n	8003b96 <_printf_i+0x186>
 8003b90:	065f      	lsls	r7, r3, #25
 8003b92:	bf48      	it	mi
 8003b94:	b2ad      	uxthmi	r5, r5
 8003b96:	6031      	str	r1, [r6, #0]
 8003b98:	07d9      	lsls	r1, r3, #31
 8003b9a:	bf44      	itt	mi
 8003b9c:	f043 0320 	orrmi.w	r3, r3, #32
 8003ba0:	6023      	strmi	r3, [r4, #0]
 8003ba2:	b11d      	cbz	r5, 8003bac <_printf_i+0x19c>
 8003ba4:	2310      	movs	r3, #16
 8003ba6:	e7ad      	b.n	8003b04 <_printf_i+0xf4>
 8003ba8:	4826      	ldr	r0, [pc, #152]	@ (8003c44 <_printf_i+0x234>)
 8003baa:	e7e9      	b.n	8003b80 <_printf_i+0x170>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	f023 0320 	bic.w	r3, r3, #32
 8003bb2:	6023      	str	r3, [r4, #0]
 8003bb4:	e7f6      	b.n	8003ba4 <_printf_i+0x194>
 8003bb6:	4616      	mov	r6, r2
 8003bb8:	e7bd      	b.n	8003b36 <_printf_i+0x126>
 8003bba:	6833      	ldr	r3, [r6, #0]
 8003bbc:	6825      	ldr	r5, [r4, #0]
 8003bbe:	6961      	ldr	r1, [r4, #20]
 8003bc0:	1d18      	adds	r0, r3, #4
 8003bc2:	6030      	str	r0, [r6, #0]
 8003bc4:	062e      	lsls	r6, r5, #24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	d501      	bpl.n	8003bce <_printf_i+0x1be>
 8003bca:	6019      	str	r1, [r3, #0]
 8003bcc:	e002      	b.n	8003bd4 <_printf_i+0x1c4>
 8003bce:	0668      	lsls	r0, r5, #25
 8003bd0:	d5fb      	bpl.n	8003bca <_printf_i+0x1ba>
 8003bd2:	8019      	strh	r1, [r3, #0]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	6123      	str	r3, [r4, #16]
 8003bd8:	4616      	mov	r6, r2
 8003bda:	e7bc      	b.n	8003b56 <_printf_i+0x146>
 8003bdc:	6833      	ldr	r3, [r6, #0]
 8003bde:	1d1a      	adds	r2, r3, #4
 8003be0:	6032      	str	r2, [r6, #0]
 8003be2:	681e      	ldr	r6, [r3, #0]
 8003be4:	6862      	ldr	r2, [r4, #4]
 8003be6:	2100      	movs	r1, #0
 8003be8:	4630      	mov	r0, r6
 8003bea:	f7fc faf9 	bl	80001e0 <memchr>
 8003bee:	b108      	cbz	r0, 8003bf4 <_printf_i+0x1e4>
 8003bf0:	1b80      	subs	r0, r0, r6
 8003bf2:	6060      	str	r0, [r4, #4]
 8003bf4:	6863      	ldr	r3, [r4, #4]
 8003bf6:	6123      	str	r3, [r4, #16]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bfe:	e7aa      	b.n	8003b56 <_printf_i+0x146>
 8003c00:	6923      	ldr	r3, [r4, #16]
 8003c02:	4632      	mov	r2, r6
 8003c04:	4649      	mov	r1, r9
 8003c06:	4640      	mov	r0, r8
 8003c08:	47d0      	blx	sl
 8003c0a:	3001      	adds	r0, #1
 8003c0c:	d0ad      	beq.n	8003b6a <_printf_i+0x15a>
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	079b      	lsls	r3, r3, #30
 8003c12:	d413      	bmi.n	8003c3c <_printf_i+0x22c>
 8003c14:	68e0      	ldr	r0, [r4, #12]
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	4298      	cmp	r0, r3
 8003c1a:	bfb8      	it	lt
 8003c1c:	4618      	movlt	r0, r3
 8003c1e:	e7a6      	b.n	8003b6e <_printf_i+0x15e>
 8003c20:	2301      	movs	r3, #1
 8003c22:	4632      	mov	r2, r6
 8003c24:	4649      	mov	r1, r9
 8003c26:	4640      	mov	r0, r8
 8003c28:	47d0      	blx	sl
 8003c2a:	3001      	adds	r0, #1
 8003c2c:	d09d      	beq.n	8003b6a <_printf_i+0x15a>
 8003c2e:	3501      	adds	r5, #1
 8003c30:	68e3      	ldr	r3, [r4, #12]
 8003c32:	9903      	ldr	r1, [sp, #12]
 8003c34:	1a5b      	subs	r3, r3, r1
 8003c36:	42ab      	cmp	r3, r5
 8003c38:	dcf2      	bgt.n	8003c20 <_printf_i+0x210>
 8003c3a:	e7eb      	b.n	8003c14 <_printf_i+0x204>
 8003c3c:	2500      	movs	r5, #0
 8003c3e:	f104 0619 	add.w	r6, r4, #25
 8003c42:	e7f5      	b.n	8003c30 <_printf_i+0x220>
 8003c44:	0800d685 	.word	0x0800d685
 8003c48:	0800d696 	.word	0x0800d696

08003c4c <_scanf_chars>:
 8003c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	4615      	mov	r5, r2
 8003c52:	688a      	ldr	r2, [r1, #8]
 8003c54:	4680      	mov	r8, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	b932      	cbnz	r2, 8003c68 <_scanf_chars+0x1c>
 8003c5a:	698a      	ldr	r2, [r1, #24]
 8003c5c:	2a00      	cmp	r2, #0
 8003c5e:	bf14      	ite	ne
 8003c60:	f04f 32ff 	movne.w	r2, #4294967295
 8003c64:	2201      	moveq	r2, #1
 8003c66:	608a      	str	r2, [r1, #8]
 8003c68:	6822      	ldr	r2, [r4, #0]
 8003c6a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8003cfc <_scanf_chars+0xb0>
 8003c6e:	06d1      	lsls	r1, r2, #27
 8003c70:	bf5f      	itttt	pl
 8003c72:	681a      	ldrpl	r2, [r3, #0]
 8003c74:	1d11      	addpl	r1, r2, #4
 8003c76:	6019      	strpl	r1, [r3, #0]
 8003c78:	6816      	ldrpl	r6, [r2, #0]
 8003c7a:	2700      	movs	r7, #0
 8003c7c:	69a0      	ldr	r0, [r4, #24]
 8003c7e:	b188      	cbz	r0, 8003ca4 <_scanf_chars+0x58>
 8003c80:	2801      	cmp	r0, #1
 8003c82:	d107      	bne.n	8003c94 <_scanf_chars+0x48>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	6963      	ldr	r3, [r4, #20]
 8003c8a:	5c9b      	ldrb	r3, [r3, r2]
 8003c8c:	b953      	cbnz	r3, 8003ca4 <_scanf_chars+0x58>
 8003c8e:	2f00      	cmp	r7, #0
 8003c90:	d031      	beq.n	8003cf6 <_scanf_chars+0xaa>
 8003c92:	e022      	b.n	8003cda <_scanf_chars+0x8e>
 8003c94:	2802      	cmp	r0, #2
 8003c96:	d120      	bne.n	8003cda <_scanf_chars+0x8e>
 8003c98:	682b      	ldr	r3, [r5, #0]
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8003ca0:	071b      	lsls	r3, r3, #28
 8003ca2:	d41a      	bmi.n	8003cda <_scanf_chars+0x8e>
 8003ca4:	6823      	ldr	r3, [r4, #0]
 8003ca6:	06da      	lsls	r2, r3, #27
 8003ca8:	bf5e      	ittt	pl
 8003caa:	682b      	ldrpl	r3, [r5, #0]
 8003cac:	781b      	ldrbpl	r3, [r3, #0]
 8003cae:	f806 3b01 	strbpl.w	r3, [r6], #1
 8003cb2:	682a      	ldr	r2, [r5, #0]
 8003cb4:	686b      	ldr	r3, [r5, #4]
 8003cb6:	3201      	adds	r2, #1
 8003cb8:	602a      	str	r2, [r5, #0]
 8003cba:	68a2      	ldr	r2, [r4, #8]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	3a01      	subs	r2, #1
 8003cc0:	606b      	str	r3, [r5, #4]
 8003cc2:	3701      	adds	r7, #1
 8003cc4:	60a2      	str	r2, [r4, #8]
 8003cc6:	b142      	cbz	r2, 8003cda <_scanf_chars+0x8e>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	dcd7      	bgt.n	8003c7c <_scanf_chars+0x30>
 8003ccc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	4640      	mov	r0, r8
 8003cd4:	4798      	blx	r3
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d0d0      	beq.n	8003c7c <_scanf_chars+0x30>
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	f013 0310 	ands.w	r3, r3, #16
 8003ce0:	d105      	bne.n	8003cee <_scanf_chars+0xa2>
 8003ce2:	68e2      	ldr	r2, [r4, #12]
 8003ce4:	3201      	adds	r2, #1
 8003ce6:	60e2      	str	r2, [r4, #12]
 8003ce8:	69a2      	ldr	r2, [r4, #24]
 8003cea:	b102      	cbz	r2, 8003cee <_scanf_chars+0xa2>
 8003cec:	7033      	strb	r3, [r6, #0]
 8003cee:	6923      	ldr	r3, [r4, #16]
 8003cf0:	443b      	add	r3, r7
 8003cf2:	6123      	str	r3, [r4, #16]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003cfa:	bf00      	nop
 8003cfc:	0800d6c3 	.word	0x0800d6c3

08003d00 <_scanf_i>:
 8003d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d04:	4698      	mov	r8, r3
 8003d06:	4b74      	ldr	r3, [pc, #464]	@ (8003ed8 <_scanf_i+0x1d8>)
 8003d08:	460c      	mov	r4, r1
 8003d0a:	4682      	mov	sl, r0
 8003d0c:	4616      	mov	r6, r2
 8003d0e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003d12:	b087      	sub	sp, #28
 8003d14:	ab03      	add	r3, sp, #12
 8003d16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8003d1a:	4b70      	ldr	r3, [pc, #448]	@ (8003edc <_scanf_i+0x1dc>)
 8003d1c:	69a1      	ldr	r1, [r4, #24]
 8003d1e:	4a70      	ldr	r2, [pc, #448]	@ (8003ee0 <_scanf_i+0x1e0>)
 8003d20:	2903      	cmp	r1, #3
 8003d22:	bf08      	it	eq
 8003d24:	461a      	moveq	r2, r3
 8003d26:	68a3      	ldr	r3, [r4, #8]
 8003d28:	9201      	str	r2, [sp, #4]
 8003d2a:	1e5a      	subs	r2, r3, #1
 8003d2c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003d30:	bf88      	it	hi
 8003d32:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003d36:	4627      	mov	r7, r4
 8003d38:	bf82      	ittt	hi
 8003d3a:	eb03 0905 	addhi.w	r9, r3, r5
 8003d3e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003d42:	60a3      	strhi	r3, [r4, #8]
 8003d44:	f857 3b1c 	ldr.w	r3, [r7], #28
 8003d48:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8003d4c:	bf98      	it	ls
 8003d4e:	f04f 0900 	movls.w	r9, #0
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	463d      	mov	r5, r7
 8003d56:	f04f 0b00 	mov.w	fp, #0
 8003d5a:	6831      	ldr	r1, [r6, #0]
 8003d5c:	ab03      	add	r3, sp, #12
 8003d5e:	7809      	ldrb	r1, [r1, #0]
 8003d60:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8003d64:	2202      	movs	r2, #2
 8003d66:	f7fc fa3b 	bl	80001e0 <memchr>
 8003d6a:	b328      	cbz	r0, 8003db8 <_scanf_i+0xb8>
 8003d6c:	f1bb 0f01 	cmp.w	fp, #1
 8003d70:	d159      	bne.n	8003e26 <_scanf_i+0x126>
 8003d72:	6862      	ldr	r2, [r4, #4]
 8003d74:	b92a      	cbnz	r2, 8003d82 <_scanf_i+0x82>
 8003d76:	6822      	ldr	r2, [r4, #0]
 8003d78:	2108      	movs	r1, #8
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	6061      	str	r1, [r4, #4]
 8003d80:	6022      	str	r2, [r4, #0]
 8003d82:	6822      	ldr	r2, [r4, #0]
 8003d84:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8003d88:	6022      	str	r2, [r4, #0]
 8003d8a:	68a2      	ldr	r2, [r4, #8]
 8003d8c:	1e51      	subs	r1, r2, #1
 8003d8e:	60a1      	str	r1, [r4, #8]
 8003d90:	b192      	cbz	r2, 8003db8 <_scanf_i+0xb8>
 8003d92:	6832      	ldr	r2, [r6, #0]
 8003d94:	1c51      	adds	r1, r2, #1
 8003d96:	6031      	str	r1, [r6, #0]
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	f805 2b01 	strb.w	r2, [r5], #1
 8003d9e:	6872      	ldr	r2, [r6, #4]
 8003da0:	3a01      	subs	r2, #1
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	6072      	str	r2, [r6, #4]
 8003da6:	dc07      	bgt.n	8003db8 <_scanf_i+0xb8>
 8003da8:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8003dac:	4631      	mov	r1, r6
 8003dae:	4650      	mov	r0, sl
 8003db0:	4790      	blx	r2
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f040 8085 	bne.w	8003ec2 <_scanf_i+0x1c2>
 8003db8:	f10b 0b01 	add.w	fp, fp, #1
 8003dbc:	f1bb 0f03 	cmp.w	fp, #3
 8003dc0:	d1cb      	bne.n	8003d5a <_scanf_i+0x5a>
 8003dc2:	6863      	ldr	r3, [r4, #4]
 8003dc4:	b90b      	cbnz	r3, 8003dca <_scanf_i+0xca>
 8003dc6:	230a      	movs	r3, #10
 8003dc8:	6063      	str	r3, [r4, #4]
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	4945      	ldr	r1, [pc, #276]	@ (8003ee4 <_scanf_i+0x1e4>)
 8003dce:	6960      	ldr	r0, [r4, #20]
 8003dd0:	1ac9      	subs	r1, r1, r3
 8003dd2:	f000 f889 	bl	8003ee8 <__sccl>
 8003dd6:	f04f 0b00 	mov.w	fp, #0
 8003dda:	68a3      	ldr	r3, [r4, #8]
 8003ddc:	6822      	ldr	r2, [r4, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d03d      	beq.n	8003e5e <_scanf_i+0x15e>
 8003de2:	6831      	ldr	r1, [r6, #0]
 8003de4:	6960      	ldr	r0, [r4, #20]
 8003de6:	f891 c000 	ldrb.w	ip, [r1]
 8003dea:	f810 000c 	ldrb.w	r0, [r0, ip]
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d035      	beq.n	8003e5e <_scanf_i+0x15e>
 8003df2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8003df6:	d124      	bne.n	8003e42 <_scanf_i+0x142>
 8003df8:	0510      	lsls	r0, r2, #20
 8003dfa:	d522      	bpl.n	8003e42 <_scanf_i+0x142>
 8003dfc:	f10b 0b01 	add.w	fp, fp, #1
 8003e00:	f1b9 0f00 	cmp.w	r9, #0
 8003e04:	d003      	beq.n	8003e0e <_scanf_i+0x10e>
 8003e06:	3301      	adds	r3, #1
 8003e08:	f109 39ff 	add.w	r9, r9, #4294967295
 8003e0c:	60a3      	str	r3, [r4, #8]
 8003e0e:	6873      	ldr	r3, [r6, #4]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	6073      	str	r3, [r6, #4]
 8003e16:	dd1b      	ble.n	8003e50 <_scanf_i+0x150>
 8003e18:	6833      	ldr	r3, [r6, #0]
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	68a3      	ldr	r3, [r4, #8]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	60a3      	str	r3, [r4, #8]
 8003e24:	e7d9      	b.n	8003dda <_scanf_i+0xda>
 8003e26:	f1bb 0f02 	cmp.w	fp, #2
 8003e2a:	d1ae      	bne.n	8003d8a <_scanf_i+0x8a>
 8003e2c:	6822      	ldr	r2, [r4, #0]
 8003e2e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8003e32:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8003e36:	d1c4      	bne.n	8003dc2 <_scanf_i+0xc2>
 8003e38:	2110      	movs	r1, #16
 8003e3a:	6061      	str	r1, [r4, #4]
 8003e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e40:	e7a2      	b.n	8003d88 <_scanf_i+0x88>
 8003e42:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8003e46:	6022      	str	r2, [r4, #0]
 8003e48:	780b      	ldrb	r3, [r1, #0]
 8003e4a:	f805 3b01 	strb.w	r3, [r5], #1
 8003e4e:	e7de      	b.n	8003e0e <_scanf_i+0x10e>
 8003e50:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003e54:	4631      	mov	r1, r6
 8003e56:	4650      	mov	r0, sl
 8003e58:	4798      	blx	r3
 8003e5a:	2800      	cmp	r0, #0
 8003e5c:	d0df      	beq.n	8003e1e <_scanf_i+0x11e>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	05d9      	lsls	r1, r3, #23
 8003e62:	d50d      	bpl.n	8003e80 <_scanf_i+0x180>
 8003e64:	42bd      	cmp	r5, r7
 8003e66:	d909      	bls.n	8003e7c <_scanf_i+0x17c>
 8003e68:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003e6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003e70:	4632      	mov	r2, r6
 8003e72:	4650      	mov	r0, sl
 8003e74:	4798      	blx	r3
 8003e76:	f105 39ff 	add.w	r9, r5, #4294967295
 8003e7a:	464d      	mov	r5, r9
 8003e7c:	42bd      	cmp	r5, r7
 8003e7e:	d028      	beq.n	8003ed2 <_scanf_i+0x1d2>
 8003e80:	6822      	ldr	r2, [r4, #0]
 8003e82:	f012 0210 	ands.w	r2, r2, #16
 8003e86:	d113      	bne.n	8003eb0 <_scanf_i+0x1b0>
 8003e88:	702a      	strb	r2, [r5, #0]
 8003e8a:	6863      	ldr	r3, [r4, #4]
 8003e8c:	9e01      	ldr	r6, [sp, #4]
 8003e8e:	4639      	mov	r1, r7
 8003e90:	4650      	mov	r0, sl
 8003e92:	47b0      	blx	r6
 8003e94:	f8d8 3000 	ldr.w	r3, [r8]
 8003e98:	6821      	ldr	r1, [r4, #0]
 8003e9a:	1d1a      	adds	r2, r3, #4
 8003e9c:	f8c8 2000 	str.w	r2, [r8]
 8003ea0:	f011 0f20 	tst.w	r1, #32
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	d00f      	beq.n	8003ec8 <_scanf_i+0x1c8>
 8003ea8:	6018      	str	r0, [r3, #0]
 8003eaa:	68e3      	ldr	r3, [r4, #12]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60e3      	str	r3, [r4, #12]
 8003eb0:	6923      	ldr	r3, [r4, #16]
 8003eb2:	1bed      	subs	r5, r5, r7
 8003eb4:	445d      	add	r5, fp
 8003eb6:	442b      	add	r3, r5
 8003eb8:	6123      	str	r3, [r4, #16]
 8003eba:	2000      	movs	r0, #0
 8003ebc:	b007      	add	sp, #28
 8003ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec2:	f04f 0b00 	mov.w	fp, #0
 8003ec6:	e7ca      	b.n	8003e5e <_scanf_i+0x15e>
 8003ec8:	07ca      	lsls	r2, r1, #31
 8003eca:	bf4c      	ite	mi
 8003ecc:	8018      	strhmi	r0, [r3, #0]
 8003ece:	6018      	strpl	r0, [r3, #0]
 8003ed0:	e7eb      	b.n	8003eaa <_scanf_i+0x1aa>
 8003ed2:	2001      	movs	r0, #1
 8003ed4:	e7f2      	b.n	8003ebc <_scanf_i+0x1bc>
 8003ed6:	bf00      	nop
 8003ed8:	0800430c 	.word	0x0800430c
 8003edc:	08004191 	.word	0x08004191
 8003ee0:	08004271 	.word	0x08004271
 8003ee4:	0800d6b7 	.word	0x0800d6b7

08003ee8 <__sccl>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	780b      	ldrb	r3, [r1, #0]
 8003eec:	4604      	mov	r4, r0
 8003eee:	2b5e      	cmp	r3, #94	@ 0x5e
 8003ef0:	bf0b      	itete	eq
 8003ef2:	784b      	ldrbeq	r3, [r1, #1]
 8003ef4:	1c4a      	addne	r2, r1, #1
 8003ef6:	1c8a      	addeq	r2, r1, #2
 8003ef8:	2100      	movne	r1, #0
 8003efa:	bf08      	it	eq
 8003efc:	2101      	moveq	r1, #1
 8003efe:	3801      	subs	r0, #1
 8003f00:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8003f04:	f800 1f01 	strb.w	r1, [r0, #1]!
 8003f08:	42a8      	cmp	r0, r5
 8003f0a:	d1fb      	bne.n	8003f04 <__sccl+0x1c>
 8003f0c:	b90b      	cbnz	r3, 8003f12 <__sccl+0x2a>
 8003f0e:	1e50      	subs	r0, r2, #1
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	f081 0101 	eor.w	r1, r1, #1
 8003f16:	54e1      	strb	r1, [r4, r3]
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f20:	2d2d      	cmp	r5, #45	@ 0x2d
 8003f22:	d005      	beq.n	8003f30 <__sccl+0x48>
 8003f24:	2d5d      	cmp	r5, #93	@ 0x5d
 8003f26:	d016      	beq.n	8003f56 <__sccl+0x6e>
 8003f28:	2d00      	cmp	r5, #0
 8003f2a:	d0f1      	beq.n	8003f10 <__sccl+0x28>
 8003f2c:	462b      	mov	r3, r5
 8003f2e:	e7f2      	b.n	8003f16 <__sccl+0x2e>
 8003f30:	7846      	ldrb	r6, [r0, #1]
 8003f32:	2e5d      	cmp	r6, #93	@ 0x5d
 8003f34:	d0fa      	beq.n	8003f2c <__sccl+0x44>
 8003f36:	42b3      	cmp	r3, r6
 8003f38:	dcf8      	bgt.n	8003f2c <__sccl+0x44>
 8003f3a:	3002      	adds	r0, #2
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	3201      	adds	r2, #1
 8003f40:	4296      	cmp	r6, r2
 8003f42:	54a1      	strb	r1, [r4, r2]
 8003f44:	dcfb      	bgt.n	8003f3e <__sccl+0x56>
 8003f46:	1af2      	subs	r2, r6, r3
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	1c5d      	adds	r5, r3, #1
 8003f4c:	42b3      	cmp	r3, r6
 8003f4e:	bfa8      	it	ge
 8003f50:	2200      	movge	r2, #0
 8003f52:	18ab      	adds	r3, r5, r2
 8003f54:	e7e1      	b.n	8003f1a <__sccl+0x32>
 8003f56:	4610      	mov	r0, r2
 8003f58:	e7da      	b.n	8003f10 <__sccl+0x28>

08003f5a <__submore>:
 8003f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5e:	460c      	mov	r4, r1
 8003f60:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8003f62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f66:	4299      	cmp	r1, r3
 8003f68:	d11d      	bne.n	8003fa6 <__submore+0x4c>
 8003f6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f6e:	f7ff f92d 	bl	80031cc <_malloc_r>
 8003f72:	b918      	cbnz	r0, 8003f7c <__submore+0x22>
 8003f74:	f04f 30ff 	mov.w	r0, #4294967295
 8003f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f80:	63a3      	str	r3, [r4, #56]	@ 0x38
 8003f82:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8003f86:	6360      	str	r0, [r4, #52]	@ 0x34
 8003f88:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8003f8c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003f90:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8003f94:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003f98:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8003f9c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8003fa0:	6020      	str	r0, [r4, #0]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	e7e8      	b.n	8003f78 <__submore+0x1e>
 8003fa6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8003fa8:	0077      	lsls	r7, r6, #1
 8003faa:	463a      	mov	r2, r7
 8003fac:	f000 f848 	bl	8004040 <_realloc_r>
 8003fb0:	4605      	mov	r5, r0
 8003fb2:	2800      	cmp	r0, #0
 8003fb4:	d0de      	beq.n	8003f74 <__submore+0x1a>
 8003fb6:	eb00 0806 	add.w	r8, r0, r6
 8003fba:	4601      	mov	r1, r0
 8003fbc:	4632      	mov	r2, r6
 8003fbe:	4640      	mov	r0, r8
 8003fc0:	f000 f830 	bl	8004024 <memcpy>
 8003fc4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8003fc8:	f8c4 8000 	str.w	r8, [r4]
 8003fcc:	e7e9      	b.n	8003fa2 <__submore+0x48>

08003fce <memmove>:
 8003fce:	4288      	cmp	r0, r1
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	eb01 0402 	add.w	r4, r1, r2
 8003fd6:	d902      	bls.n	8003fde <memmove+0x10>
 8003fd8:	4284      	cmp	r4, r0
 8003fda:	4623      	mov	r3, r4
 8003fdc:	d807      	bhi.n	8003fee <memmove+0x20>
 8003fde:	1e43      	subs	r3, r0, #1
 8003fe0:	42a1      	cmp	r1, r4
 8003fe2:	d008      	beq.n	8003ff6 <memmove+0x28>
 8003fe4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fe8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fec:	e7f8      	b.n	8003fe0 <memmove+0x12>
 8003fee:	4402      	add	r2, r0
 8003ff0:	4601      	mov	r1, r0
 8003ff2:	428a      	cmp	r2, r1
 8003ff4:	d100      	bne.n	8003ff8 <memmove+0x2a>
 8003ff6:	bd10      	pop	{r4, pc}
 8003ff8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ffc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004000:	e7f7      	b.n	8003ff2 <memmove+0x24>
	...

08004004 <_sbrk_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4d06      	ldr	r5, [pc, #24]	@ (8004020 <_sbrk_r+0x1c>)
 8004008:	2300      	movs	r3, #0
 800400a:	4604      	mov	r4, r0
 800400c:	4608      	mov	r0, r1
 800400e:	602b      	str	r3, [r5, #0]
 8004010:	f7fd f91e 	bl	8001250 <_sbrk>
 8004014:	1c43      	adds	r3, r0, #1
 8004016:	d102      	bne.n	800401e <_sbrk_r+0x1a>
 8004018:	682b      	ldr	r3, [r5, #0]
 800401a:	b103      	cbz	r3, 800401e <_sbrk_r+0x1a>
 800401c:	6023      	str	r3, [r4, #0]
 800401e:	bd38      	pop	{r3, r4, r5, pc}
 8004020:	20000238 	.word	0x20000238

08004024 <memcpy>:
 8004024:	440a      	add	r2, r1
 8004026:	4291      	cmp	r1, r2
 8004028:	f100 33ff 	add.w	r3, r0, #4294967295
 800402c:	d100      	bne.n	8004030 <memcpy+0xc>
 800402e:	4770      	bx	lr
 8004030:	b510      	push	{r4, lr}
 8004032:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004036:	f803 4f01 	strb.w	r4, [r3, #1]!
 800403a:	4291      	cmp	r1, r2
 800403c:	d1f9      	bne.n	8004032 <memcpy+0xe>
 800403e:	bd10      	pop	{r4, pc}

08004040 <_realloc_r>:
 8004040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004044:	4607      	mov	r7, r0
 8004046:	4614      	mov	r4, r2
 8004048:	460d      	mov	r5, r1
 800404a:	b921      	cbnz	r1, 8004056 <_realloc_r+0x16>
 800404c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004050:	4611      	mov	r1, r2
 8004052:	f7ff b8bb 	b.w	80031cc <_malloc_r>
 8004056:	b92a      	cbnz	r2, 8004064 <_realloc_r+0x24>
 8004058:	f7ff f84c 	bl	80030f4 <_free_r>
 800405c:	4625      	mov	r5, r4
 800405e:	4628      	mov	r0, r5
 8004060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004064:	f000 f906 	bl	8004274 <_malloc_usable_size_r>
 8004068:	4284      	cmp	r4, r0
 800406a:	4606      	mov	r6, r0
 800406c:	d802      	bhi.n	8004074 <_realloc_r+0x34>
 800406e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004072:	d8f4      	bhi.n	800405e <_realloc_r+0x1e>
 8004074:	4621      	mov	r1, r4
 8004076:	4638      	mov	r0, r7
 8004078:	f7ff f8a8 	bl	80031cc <_malloc_r>
 800407c:	4680      	mov	r8, r0
 800407e:	b908      	cbnz	r0, 8004084 <_realloc_r+0x44>
 8004080:	4645      	mov	r5, r8
 8004082:	e7ec      	b.n	800405e <_realloc_r+0x1e>
 8004084:	42b4      	cmp	r4, r6
 8004086:	4622      	mov	r2, r4
 8004088:	4629      	mov	r1, r5
 800408a:	bf28      	it	cs
 800408c:	4632      	movcs	r2, r6
 800408e:	f7ff ffc9 	bl	8004024 <memcpy>
 8004092:	4629      	mov	r1, r5
 8004094:	4638      	mov	r0, r7
 8004096:	f7ff f82d 	bl	80030f4 <_free_r>
 800409a:	e7f1      	b.n	8004080 <_realloc_r+0x40>

0800409c <_strtol_l.isra.0>:
 800409c:	2b24      	cmp	r3, #36	@ 0x24
 800409e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a2:	4686      	mov	lr, r0
 80040a4:	4690      	mov	r8, r2
 80040a6:	d801      	bhi.n	80040ac <_strtol_l.isra.0+0x10>
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <_strtol_l.isra.0+0x1e>
 80040ac:	f7fe fff6 	bl	800309c <__errno>
 80040b0:	2316      	movs	r3, #22
 80040b2:	6003      	str	r3, [r0, #0]
 80040b4:	2000      	movs	r0, #0
 80040b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ba:	4834      	ldr	r0, [pc, #208]	@ (800418c <_strtol_l.isra.0+0xf0>)
 80040bc:	460d      	mov	r5, r1
 80040be:	462a      	mov	r2, r5
 80040c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80040c4:	5d06      	ldrb	r6, [r0, r4]
 80040c6:	f016 0608 	ands.w	r6, r6, #8
 80040ca:	d1f8      	bne.n	80040be <_strtol_l.isra.0+0x22>
 80040cc:	2c2d      	cmp	r4, #45	@ 0x2d
 80040ce:	d110      	bne.n	80040f2 <_strtol_l.isra.0+0x56>
 80040d0:	782c      	ldrb	r4, [r5, #0]
 80040d2:	2601      	movs	r6, #1
 80040d4:	1c95      	adds	r5, r2, #2
 80040d6:	f033 0210 	bics.w	r2, r3, #16
 80040da:	d115      	bne.n	8004108 <_strtol_l.isra.0+0x6c>
 80040dc:	2c30      	cmp	r4, #48	@ 0x30
 80040de:	d10d      	bne.n	80040fc <_strtol_l.isra.0+0x60>
 80040e0:	782a      	ldrb	r2, [r5, #0]
 80040e2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80040e6:	2a58      	cmp	r2, #88	@ 0x58
 80040e8:	d108      	bne.n	80040fc <_strtol_l.isra.0+0x60>
 80040ea:	786c      	ldrb	r4, [r5, #1]
 80040ec:	3502      	adds	r5, #2
 80040ee:	2310      	movs	r3, #16
 80040f0:	e00a      	b.n	8004108 <_strtol_l.isra.0+0x6c>
 80040f2:	2c2b      	cmp	r4, #43	@ 0x2b
 80040f4:	bf04      	itt	eq
 80040f6:	782c      	ldrbeq	r4, [r5, #0]
 80040f8:	1c95      	addeq	r5, r2, #2
 80040fa:	e7ec      	b.n	80040d6 <_strtol_l.isra.0+0x3a>
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f6      	bne.n	80040ee <_strtol_l.isra.0+0x52>
 8004100:	2c30      	cmp	r4, #48	@ 0x30
 8004102:	bf14      	ite	ne
 8004104:	230a      	movne	r3, #10
 8004106:	2308      	moveq	r3, #8
 8004108:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800410c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004110:	2200      	movs	r2, #0
 8004112:	fbbc f9f3 	udiv	r9, ip, r3
 8004116:	4610      	mov	r0, r2
 8004118:	fb03 ca19 	mls	sl, r3, r9, ip
 800411c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004120:	2f09      	cmp	r7, #9
 8004122:	d80f      	bhi.n	8004144 <_strtol_l.isra.0+0xa8>
 8004124:	463c      	mov	r4, r7
 8004126:	42a3      	cmp	r3, r4
 8004128:	dd1b      	ble.n	8004162 <_strtol_l.isra.0+0xc6>
 800412a:	1c57      	adds	r7, r2, #1
 800412c:	d007      	beq.n	800413e <_strtol_l.isra.0+0xa2>
 800412e:	4581      	cmp	r9, r0
 8004130:	d314      	bcc.n	800415c <_strtol_l.isra.0+0xc0>
 8004132:	d101      	bne.n	8004138 <_strtol_l.isra.0+0x9c>
 8004134:	45a2      	cmp	sl, r4
 8004136:	db11      	blt.n	800415c <_strtol_l.isra.0+0xc0>
 8004138:	fb00 4003 	mla	r0, r0, r3, r4
 800413c:	2201      	movs	r2, #1
 800413e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004142:	e7eb      	b.n	800411c <_strtol_l.isra.0+0x80>
 8004144:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004148:	2f19      	cmp	r7, #25
 800414a:	d801      	bhi.n	8004150 <_strtol_l.isra.0+0xb4>
 800414c:	3c37      	subs	r4, #55	@ 0x37
 800414e:	e7ea      	b.n	8004126 <_strtol_l.isra.0+0x8a>
 8004150:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004154:	2f19      	cmp	r7, #25
 8004156:	d804      	bhi.n	8004162 <_strtol_l.isra.0+0xc6>
 8004158:	3c57      	subs	r4, #87	@ 0x57
 800415a:	e7e4      	b.n	8004126 <_strtol_l.isra.0+0x8a>
 800415c:	f04f 32ff 	mov.w	r2, #4294967295
 8004160:	e7ed      	b.n	800413e <_strtol_l.isra.0+0xa2>
 8004162:	1c53      	adds	r3, r2, #1
 8004164:	d108      	bne.n	8004178 <_strtol_l.isra.0+0xdc>
 8004166:	2322      	movs	r3, #34	@ 0x22
 8004168:	f8ce 3000 	str.w	r3, [lr]
 800416c:	4660      	mov	r0, ip
 800416e:	f1b8 0f00 	cmp.w	r8, #0
 8004172:	d0a0      	beq.n	80040b6 <_strtol_l.isra.0+0x1a>
 8004174:	1e69      	subs	r1, r5, #1
 8004176:	e006      	b.n	8004186 <_strtol_l.isra.0+0xea>
 8004178:	b106      	cbz	r6, 800417c <_strtol_l.isra.0+0xe0>
 800417a:	4240      	negs	r0, r0
 800417c:	f1b8 0f00 	cmp.w	r8, #0
 8004180:	d099      	beq.n	80040b6 <_strtol_l.isra.0+0x1a>
 8004182:	2a00      	cmp	r2, #0
 8004184:	d1f6      	bne.n	8004174 <_strtol_l.isra.0+0xd8>
 8004186:	f8c8 1000 	str.w	r1, [r8]
 800418a:	e794      	b.n	80040b6 <_strtol_l.isra.0+0x1a>
 800418c:	0800d6c3 	.word	0x0800d6c3

08004190 <_strtol_r>:
 8004190:	f7ff bf84 	b.w	800409c <_strtol_l.isra.0>

08004194 <_strtoul_l.isra.0>:
 8004194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004198:	4e34      	ldr	r6, [pc, #208]	@ (800426c <_strtoul_l.isra.0+0xd8>)
 800419a:	4686      	mov	lr, r0
 800419c:	460d      	mov	r5, r1
 800419e:	4628      	mov	r0, r5
 80041a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80041a4:	5d37      	ldrb	r7, [r6, r4]
 80041a6:	f017 0708 	ands.w	r7, r7, #8
 80041aa:	d1f8      	bne.n	800419e <_strtoul_l.isra.0+0xa>
 80041ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80041ae:	d110      	bne.n	80041d2 <_strtoul_l.isra.0+0x3e>
 80041b0:	782c      	ldrb	r4, [r5, #0]
 80041b2:	2701      	movs	r7, #1
 80041b4:	1c85      	adds	r5, r0, #2
 80041b6:	f033 0010 	bics.w	r0, r3, #16
 80041ba:	d115      	bne.n	80041e8 <_strtoul_l.isra.0+0x54>
 80041bc:	2c30      	cmp	r4, #48	@ 0x30
 80041be:	d10d      	bne.n	80041dc <_strtoul_l.isra.0+0x48>
 80041c0:	7828      	ldrb	r0, [r5, #0]
 80041c2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80041c6:	2858      	cmp	r0, #88	@ 0x58
 80041c8:	d108      	bne.n	80041dc <_strtoul_l.isra.0+0x48>
 80041ca:	786c      	ldrb	r4, [r5, #1]
 80041cc:	3502      	adds	r5, #2
 80041ce:	2310      	movs	r3, #16
 80041d0:	e00a      	b.n	80041e8 <_strtoul_l.isra.0+0x54>
 80041d2:	2c2b      	cmp	r4, #43	@ 0x2b
 80041d4:	bf04      	itt	eq
 80041d6:	782c      	ldrbeq	r4, [r5, #0]
 80041d8:	1c85      	addeq	r5, r0, #2
 80041da:	e7ec      	b.n	80041b6 <_strtoul_l.isra.0+0x22>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f6      	bne.n	80041ce <_strtoul_l.isra.0+0x3a>
 80041e0:	2c30      	cmp	r4, #48	@ 0x30
 80041e2:	bf14      	ite	ne
 80041e4:	230a      	movne	r3, #10
 80041e6:	2308      	moveq	r3, #8
 80041e8:	f04f 38ff 	mov.w	r8, #4294967295
 80041ec:	2600      	movs	r6, #0
 80041ee:	fbb8 f8f3 	udiv	r8, r8, r3
 80041f2:	fb03 f908 	mul.w	r9, r3, r8
 80041f6:	ea6f 0909 	mvn.w	r9, r9
 80041fa:	4630      	mov	r0, r6
 80041fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004200:	f1bc 0f09 	cmp.w	ip, #9
 8004204:	d810      	bhi.n	8004228 <_strtoul_l.isra.0+0x94>
 8004206:	4664      	mov	r4, ip
 8004208:	42a3      	cmp	r3, r4
 800420a:	dd1e      	ble.n	800424a <_strtoul_l.isra.0+0xb6>
 800420c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004210:	d007      	beq.n	8004222 <_strtoul_l.isra.0+0x8e>
 8004212:	4580      	cmp	r8, r0
 8004214:	d316      	bcc.n	8004244 <_strtoul_l.isra.0+0xb0>
 8004216:	d101      	bne.n	800421c <_strtoul_l.isra.0+0x88>
 8004218:	45a1      	cmp	r9, r4
 800421a:	db13      	blt.n	8004244 <_strtoul_l.isra.0+0xb0>
 800421c:	fb00 4003 	mla	r0, r0, r3, r4
 8004220:	2601      	movs	r6, #1
 8004222:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004226:	e7e9      	b.n	80041fc <_strtoul_l.isra.0+0x68>
 8004228:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800422c:	f1bc 0f19 	cmp.w	ip, #25
 8004230:	d801      	bhi.n	8004236 <_strtoul_l.isra.0+0xa2>
 8004232:	3c37      	subs	r4, #55	@ 0x37
 8004234:	e7e8      	b.n	8004208 <_strtoul_l.isra.0+0x74>
 8004236:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800423a:	f1bc 0f19 	cmp.w	ip, #25
 800423e:	d804      	bhi.n	800424a <_strtoul_l.isra.0+0xb6>
 8004240:	3c57      	subs	r4, #87	@ 0x57
 8004242:	e7e1      	b.n	8004208 <_strtoul_l.isra.0+0x74>
 8004244:	f04f 36ff 	mov.w	r6, #4294967295
 8004248:	e7eb      	b.n	8004222 <_strtoul_l.isra.0+0x8e>
 800424a:	1c73      	adds	r3, r6, #1
 800424c:	d106      	bne.n	800425c <_strtoul_l.isra.0+0xc8>
 800424e:	2322      	movs	r3, #34	@ 0x22
 8004250:	f8ce 3000 	str.w	r3, [lr]
 8004254:	4630      	mov	r0, r6
 8004256:	b932      	cbnz	r2, 8004266 <_strtoul_l.isra.0+0xd2>
 8004258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800425c:	b107      	cbz	r7, 8004260 <_strtoul_l.isra.0+0xcc>
 800425e:	4240      	negs	r0, r0
 8004260:	2a00      	cmp	r2, #0
 8004262:	d0f9      	beq.n	8004258 <_strtoul_l.isra.0+0xc4>
 8004264:	b106      	cbz	r6, 8004268 <_strtoul_l.isra.0+0xd4>
 8004266:	1e69      	subs	r1, r5, #1
 8004268:	6011      	str	r1, [r2, #0]
 800426a:	e7f5      	b.n	8004258 <_strtoul_l.isra.0+0xc4>
 800426c:	0800d6c3 	.word	0x0800d6c3

08004270 <_strtoul_r>:
 8004270:	f7ff bf90 	b.w	8004194 <_strtoul_l.isra.0>

08004274 <_malloc_usable_size_r>:
 8004274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004278:	1f18      	subs	r0, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfbc      	itt	lt
 800427e:	580b      	ldrlt	r3, [r1, r0]
 8004280:	18c0      	addlt	r0, r0, r3
 8004282:	4770      	bx	lr

08004284 <_init>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

08004290 <_fini>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr
